{
  "{\"sourceRoot\":\"/Users/new_name/Desktop/sudoku solver/routes/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/new_name/Desktop/sudoku solver\",\"filename\":\"/Users/new_name/Desktop/sudoku solver/routes/api.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/new_name/Desktop/sudoku solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/new_name/Desktop/sudoku solver/routes/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/new_name/Desktop/sudoku solver",
      "filename": "/Users/new_name/Desktop/sudoku solver/routes/api.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/new_name/Desktop/sudoku solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/new_name/Desktop/sudoku solver/routes/api.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/new_name/Desktop/sudoku solver/routes/api.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/new_name/Desktop/sudoku solver/routes/",
        "sourceFileName": "api.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n\nmodule.exports = function (app) {\n  let solver = new SudokuSolver();\n  app.route('/api/check').post((req, res) => {\n    let puzzle = req.body.puzzle;\n    let coordinate = req.body.coordinate;\n    let stringValue = req.body.value;\n    let value = parseInt(req.body.value);\n\n    if (!puzzle || !coordinate || !stringValue) {\n      res.json({\n        error: 'Required field(s) missing'\n      });\n      return;\n    }\n\n    if (!/^[1-9]$/.test(value)) {\n      res.json({\n        error: \"Invalid value\"\n      });\n      return;\n    }\n\n    const coordinateMatch = coordinate.match(/([A-I])([1-9])/);\n\n    if (coordinate.length !== 2 || !coordinateMatch) {\n      res.json({\n        error: \"Invalid coordinate\"\n      });\n      return;\n    }\n\n    let columnLetterValue = coordinateMatch[1];\n    let horizontalValue = parseInt(coordinateMatch[2]);\n    let columnValue = columnLetterValue.charCodeAt(0) - 'A'.charCodeAt(0) + 1;\n\n    if (!solver.validate(puzzle)) {\n      res.json({\n        error: 'Invalid characters in puzzle'\n      });\n      return;\n    }\n\n    if (solver.validate(puzzle) === \"too many characters\") {\n      res.json({\n        error: 'Expected puzzle to be 81 characters long'\n      });\n      return;\n    }\n\n    let puzzleArray = solver.createTwoDimensionalArray(puzzle);\n    let checkHorizontalConflict = solver.checkRowPlacement(puzzleArray, horizontalValue - 1, columnValue - 1, value);\n    let checkVerticalConflict = solver.checkColPlacement(puzzleArray, horizontalValue - 1, columnValue - 1, value);\n    let checkRegionConflict = solver.checkRegionPlacement(puzzleArray, horizontalValue - 1, columnValue - 1, value);\n    let conflicts = [];\n\n    if (!checkHorizontalConflict) {\n      conflicts.push(\"row\");\n    }\n\n    if (!checkVerticalConflict) {\n      conflicts.push(\"column\");\n    }\n\n    if (!checkRegionConflict) {\n      conflicts.push('region');\n    }\n\n    if (conflicts.length > 0) {\n      res.json({\n        valid: false,\n        conflict: conflicts\n      });\n      return;\n    } else {\n      res.json({\n        valid: true\n      });\n      return;\n    }\n  });\n  app.route('/api/solve').post((req, res) => {\n    let puzzle = req.body.puzzle;\n\n    if (!puzzle) {\n      res.json({\n        error: 'Required field missing'\n      });\n      return;\n    }\n\n    if (!solver.validate(puzzle)) {\n      res.json({\n        error: 'Invalid characters in puzzle'\n      });\n      return;\n    }\n\n    if (solver.validate(puzzle) === \"too many characters\") {\n      res.json({\n        error: 'Expected puzzle to be 81 characters long'\n      });\n      return;\n    }\n\n    let puzzleArray = solver.createTwoDimensionalArray(puzzle);\n    let solution = solver.solve(puzzleArray);\n    console.log(solution);\n\n    if (!solution) {\n      res.json({\n        error: 'Puzzle cannot be solved'\n      });\n      return;\n    } // let puzzleArrayString = solution.map((row) => row.join('')).join('');\n\n\n    res.json({\n      solution: solution\n    });\n  });\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "api.js"
      ],
      "names": [
        "SudokuSolver",
        "require",
        "module",
        "exports",
        "app",
        "solver",
        "route",
        "post",
        "req",
        "res",
        "puzzle",
        "body",
        "coordinate",
        "stringValue",
        "value",
        "parseInt",
        "json",
        "error",
        "test",
        "coordinateMatch",
        "match",
        "length",
        "columnLetterValue",
        "horizontalValue",
        "columnValue",
        "charCodeAt",
        "validate",
        "puzzleArray",
        "createTwoDimensionalArray",
        "checkHorizontalConflict",
        "checkRowPlacement",
        "checkVerticalConflict",
        "checkColPlacement",
        "checkRegionConflict",
        "checkRegionPlacement",
        "conflicts",
        "push",
        "valid",
        "conflict",
        "solution",
        "solve",
        "console",
        "log"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/new_name/Desktop/sudoku solver/routes/",
      "sourcesContent": [
        "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n\nmodule.exports = function (app) {\n  \n  let solver = new SudokuSolver();\n\n  app.route('/api/check')\n    .post((req, res) => {\n      let puzzle = req.body.puzzle;\n      let coordinate = req.body.coordinate;\n      let stringValue = req.body.value;\n      let value = parseInt(req.body.value);\n\n      if (!puzzle || !coordinate || !stringValue) {\n        res.json({ error: 'Required field(s) missing' });\n        return;\n      }\n      \n      if (!/^[1-9]$/.test(value)) {\n        res.json({ error: \"Invalid value\" });\n        return;\n      }\n  \n      const  coordinateMatch = coordinate.match(/([A-I])([1-9])/);\n\n      if (coordinate.length !== 2 || !coordinateMatch) {\n        res.json({ error: \"Invalid coordinate\" });\n        return;\n      }\n\n      let columnLetterValue = coordinateMatch[1];\n      let horizontalValue = parseInt(coordinateMatch[2]);\n      let columnValue = columnLetterValue.charCodeAt(0) - 'A'.charCodeAt(0) + 1;\n\n      if (!solver.validate(puzzle)) {\n        res.json({ error: 'Invalid characters in puzzle' });\n        return;\n      }\n\n      if (solver.validate(puzzle) === \"too many characters\") {\n        res.json({ error: 'Expected puzzle to be 81 characters long' });\n        return;\n      }\n\n      let puzzleArray = solver.createTwoDimensionalArray(puzzle);\n\n      let checkHorizontalConflict = solver.checkRowPlacement(puzzleArray, horizontalValue - 1, columnValue - 1, value);\n      let checkVerticalConflict = solver.checkColPlacement(puzzleArray, horizontalValue - 1, columnValue - 1, value);\n      let checkRegionConflict = solver.checkRegionPlacement(puzzleArray, horizontalValue - 1, columnValue - 1, value);\n\n      let conflicts = [];\n\n      if (!checkHorizontalConflict) {\n        conflicts.push(\"row\");\n      }\n      if (!checkVerticalConflict) {\n        conflicts.push(\"column\");\n      }\n      if (!checkRegionConflict) {\n        conflicts.push('region');\n      }\n      \n      if (conflicts.length > 0) {\n        res.json({ valid: false, conflict: conflicts });\n        return;\n      } else {\n        res.json({ valid: true });\n        return;\n      }\n    });\n    \n  app.route('/api/solve')\n    .post((req, res) => {\n      let puzzle = req.body.puzzle;\n\n      if (!puzzle) {\n        res.json({ error: 'Required field missing' });\n        return;\n      }\n      if (!solver.validate(puzzle)) {\n        res.json({ error: 'Invalid characters in puzzle' });\n        return;\n      }\n      if (solver.validate(puzzle) === \"too many characters\") {\n        res.json({ error: 'Expected puzzle to be 81 characters long' });\n        return;\n      }\n\n      let puzzleArray = solver.createTwoDimensionalArray(puzzle);\n\n      let solution = solver.solve(puzzleArray);\n      console.log(solution);\n\n      if (!solution) {\n        res.json({ error: 'Puzzle cannot be solved' });\n        return;\n      }\n      // let puzzleArrayString = solution.map((row) => row.join('')).join('');\n\n      res.json({solution: solution});\n    });\n};\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1705097471501
  },
  "{\"sourceRoot\":\"/Users/new_name/Desktop/sudoku solver/controllers/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/new_name/Desktop/sudoku solver\",\"filename\":\"/Users/new_name/Desktop/sudoku solver/controllers/sudoku-solver.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/new_name/Desktop/sudoku solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/new_name/Desktop/sudoku solver/controllers/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/new_name/Desktop/sudoku solver",
      "filename": "/Users/new_name/Desktop/sudoku solver/controllers/sudoku-solver.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/new_name/Desktop/sudoku solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/new_name/Desktop/sudoku solver/controllers/sudoku-solver.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/new_name/Desktop/sudoku solver/controllers/sudoku-solver.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/new_name/Desktop/sudoku solver/controllers/",
        "sourceFileName": "sudoku-solver.js"
      }
    },
    "ast": null,
    "code": "class SudokuSolver {\n  createTwoDimensionalArray(puzzleString) {\n    const size = 9;\n    const sudokuArray = [];\n\n    for (let i = 0; i < size; i++) {\n      sudokuArray.push(puzzleString.slice(i * size, (i + 1) * size).split(''));\n    }\n\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        sudokuArray[i][j] = sudokuArray[i][j] === '.' ? 0 : parseInt(sudokuArray[i][j]);\n      }\n    }\n\n    return sudokuArray;\n  }\n\n  arrayToString(array) {\n    return array.map(row => row.join('')).join('');\n  }\n\n  validate(puzzleString) {\n    if (puzzleString.length === 81) {\n      return /^[1-9.]+$/.test(puzzleString);\n    } else {\n      return \"too many characters\";\n    }\n  }\n\n  checkRowPlacement(puzzleArray, row, column, value) {\n    if (puzzleArray[row][column] === value) {\n      return true;\n    }\n\n    if (puzzleArray[row][column] !== 0) {\n      return false;\n    }\n\n    for (let i = 0; i < 9; i++) {\n      if (puzzleArray[row][i] === value) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  checkColPlacement(puzzleArray, row, column, value) {\n    if (puzzleArray[row][column] === value) {\n      return true;\n    }\n\n    if (puzzleArray[row][column] !== 0) {\n      return false;\n    }\n\n    for (let i = 0; i < 9; i++) {\n      if (puzzleArray[i][column] === value) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  checkRegionPlacement(puzzleArray, row, column, value) {\n    const subgridRow = Math.floor(row / 3) * 3;\n    const subgridCol = Math.floor(column / 3) * 3;\n\n    if (puzzleArray[row][column] === value) {\n      return true;\n    }\n\n    if (puzzleArray[row][column] !== 0) {\n      return false;\n    }\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (puzzleArray[subgridRow + i][subgridCol + j] === value) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  solve(puzzleArray) {\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        if (puzzleArray[row][col] === 0) {\n          for (let num = 1; num <= 9; num++) {\n            if (this.checkRowPlacement(puzzleArray, row, col, num) && this.checkColPlacement(puzzleArray, row, col, num) && this.checkRegionPlacement(puzzleArray, row, col, num)) {\n              puzzleArray[row][col] = num;\n\n              if (this.solve(puzzleArray)) {\n                return this.arrayToString(puzzleArray);\n              }\n\n              puzzleArray[row][col] = 0;\n            }\n          }\n\n          return false;\n        }\n      }\n    }\n\n    return puzzleArray;\n  }\n\n}\n\nmodule.exports = SudokuSolver;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "sudoku-solver.js"
      ],
      "names": [
        "SudokuSolver",
        "createTwoDimensionalArray",
        "puzzleString",
        "size",
        "sudokuArray",
        "i",
        "push",
        "slice",
        "split",
        "j",
        "parseInt",
        "arrayToString",
        "array",
        "map",
        "row",
        "join",
        "validate",
        "length",
        "test",
        "checkRowPlacement",
        "puzzleArray",
        "column",
        "value",
        "checkColPlacement",
        "checkRegionPlacement",
        "subgridRow",
        "Math",
        "floor",
        "subgridCol",
        "solve",
        "col",
        "num",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/new_name/Desktop/sudoku solver/controllers/",
      "sourcesContent": [
        "class SudokuSolver {\n\n  createTwoDimensionalArray(puzzleString) {\n    const size = 9;\n    const sudokuArray = [];\n\n    for (let i = 0; i < size; i++) {\n      sudokuArray.push(puzzleString.slice(i * size, (i + 1) * size).split(''));\n    }\n\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        sudokuArray[i][j] = sudokuArray[i][j] === '.' ? 0 : parseInt(sudokuArray[i][j])\n      }\n    }\n    return sudokuArray;\n  }\n\n  arrayToString(array) {\n    return array.map(row => row.join('')).join('');\n  }\n\n  validate(puzzleString) {\n    if (puzzleString.length === 81) {\n      return /^[1-9.]+$/.test(puzzleString);\n    }else {\n      return \"too many characters\";\n    }\n  }\n\n  checkRowPlacement(puzzleArray, row, column, value) {\n    if (puzzleArray[row][column] === value) {\n      return true;\n    }\n    \n    if (puzzleArray[row][column] !== 0) {\n      return false;\n    }\n    \n    for (let i = 0; i < 9; i++) {\n      if (puzzleArray[row][i] === value) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  checkColPlacement(puzzleArray, row, column, value) {\n    if (puzzleArray[row][column] === value) {\n      return true;\n    }\n\n    if (puzzleArray[row][column] !== 0) {\n      return false;\n    }\n   \n    for (let i = 0; i < 9; i++) {\n      if (puzzleArray[i][column] === value) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  checkRegionPlacement(puzzleArray, row, column, value) {\n    const subgridRow = Math.floor(row / 3) * 3;\n    const subgridCol = Math.floor(column / 3) * 3;\n\n    if (puzzleArray[row][column] === value) {\n      return true;\n    }\n\n    if (puzzleArray[row][column] !== 0) {\n      return false;\n    }\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (puzzleArray[subgridRow + i][subgridCol + j] === value) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  solve(puzzleArray) {\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        if (puzzleArray[row][col] === 0) {\n          for (let num = 1; num <= 9; num++) {\n            if (this.checkRowPlacement(puzzleArray, row, col, num) && this.checkColPlacement(puzzleArray, row, col, num) && this.checkRegionPlacement(puzzleArray, row, col, num)) {\n              puzzleArray[row][col] = num;\n              \n              if (this.solve(puzzleArray)) {\n                return this.arrayToString(puzzleArray);\n              }\n              puzzleArray[row][col] = 0;\n            }\n          }\n          return false;\n        }\n      }\n    }\n    return puzzleArray;\n  }\n}\n\nmodule.exports = SudokuSolver;\n\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1705097843559
  },
  "{\"sourceRoot\":\"/Users/new_name/Desktop/sudoku solver/tests/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/new_name/Desktop/sudoku solver\",\"filename\":\"/Users/new_name/Desktop/sudoku solver/tests/1_unit-tests.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/new_name/Desktop/sudoku solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/new_name/Desktop/sudoku solver/tests/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/new_name/Desktop/sudoku solver",
      "filename": "/Users/new_name/Desktop/sudoku solver/tests/1_unit-tests.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/new_name/Desktop/sudoku solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/new_name/Desktop/sudoku solver/tests/1_unit-tests.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/new_name/Desktop/sudoku solver/tests/1_unit-tests.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/new_name/Desktop/sudoku solver/tests/",
        "sourceFileName": "1_unit-tests.js"
      }
    },
    "ast": null,
    "code": "const chai = require('chai');\n\nconst assert = chai.assert;\n\nconst Solver = require('../controllers/sudoku-solver.js');\n\nlet solver = new Solver();\nconst puzzleString = '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..';\nconst invalidCharacterString = '$.9..5.1.85.4....2432...$..1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..';\nconst tooShortString = '1.5..2.84..63.12.7.2..5.....9..1....8.2.3674.3.7.2..9.47...8..1..16....92691';\nconst arrayString = solver.createTwoDimensionalArray(puzzleString);\nconst invalidArrayString = solver.createTwoDimensionalArray('..5..5.1.85.4....2432..7...1...69.83.9.....5.62.71...9....3.1945....4.37.4.3..6..');\nsuite('Unit Tests', () => {\n  test('handles a valid puzzle string of 81 characters', done => {\n    assert.equal(solver.validate(puzzleString), true);\n    done();\n  });\n  test('handles a puzzle string with invalid characters', done => {\n    assert.equal(solver.validate(invalidCharacterString), false);\n    done();\n  });\n  test('handles a puzzle string that is not 81 characters in length', done => {\n    assert.equal(solver.validate(tooShortString), \"too many characters\");\n    done();\n  });\n  test('Logic handles a valid row placement', done => {\n    assert.equal(solver.checkRowPlacement(arrayString, 0, 0, 7), true);\n    done();\n  });\n  test('Logic handles an invalid row placement', done => {\n    assert.equal(solver.checkRowPlacement(arrayString, 0, 0, 5), false);\n    done();\n  });\n  test('Logic handles a valid column placement', done => {\n    assert.equal(solver.checkColPlacement(arrayString, 0, 0, 7), true);\n    done();\n  });\n  test('Logic handles an invalid column placement', done => {\n    assert.equal(solver.checkColPlacement(arrayString, 0, 0, 5), false);\n    done();\n  });\n  test('Logic handles a valid region (3x3 grid) placement', done => {\n    assert.equal(solver.checkRegionPlacement(arrayString, 0, 0, 7), true);\n    done();\n  });\n  test('Logic handles an invalid region (3x3 grid) placement', done => {\n    assert.equal(solver.checkRegionPlacement(arrayString, 0, 0, 5), false);\n    done();\n  });\n  test('Valid puzzle strings pass the solver', done => {\n    let arrayString1 = solver.createTwoDimensionalArray('5..91372.3...8.5.9.9.25..8.68.47.23...95..46.7.4.....5.2.......4..8916..85.72...3');\n    assert.equal(solver.solve(arrayString1), '568913724342687519197254386685479231219538467734162895926345178473891652851726943');\n    done();\n  });\n  test('Invalid puzzle strings fail the solver', done => {\n    assert.equal(solver.solve(invalidArrayString), false);\n    done();\n  });\n  test('Solver returns the expected solution for an incomplete puzzle', done => {\n    let arrayString2 = solver.createTwoDimensionalArray('..839.7.575.....964..1.......16.29846.9.312.7..754.....62..5.78.8...3.2...492...1');\n    assert.equal(solver.solve(arrayString2), '218396745753284196496157832531672984649831257827549613962415378185763429374928561');\n    done();\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjFfdW5pdC10ZXN0cy5qcyJdLCJuYW1lcyI6WyJjaGFpIiwicmVxdWlyZSIsImFzc2VydCIsIlNvbHZlciIsInNvbHZlciIsInB1enpsZVN0cmluZyIsImludmFsaWRDaGFyYWN0ZXJTdHJpbmciLCJ0b29TaG9ydFN0cmluZyIsImFycmF5U3RyaW5nIiwiY3JlYXRlVHdvRGltZW5zaW9uYWxBcnJheSIsImludmFsaWRBcnJheVN0cmluZyIsInN1aXRlIiwidGVzdCIsImRvbmUiLCJlcXVhbCIsInZhbGlkYXRlIiwiY2hlY2tSb3dQbGFjZW1lbnQiLCJjaGVja0NvbFBsYWNlbWVudCIsImNoZWNrUmVnaW9uUGxhY2VtZW50IiwiYXJyYXlTdHJpbmcxIiwic29sdmUiLCJhcnJheVN0cmluZzIiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTUMsTUFBTSxHQUFHRixJQUFJLENBQUNFLE1BQXBCOztBQUVBLE1BQU1DLE1BQU0sR0FBR0YsT0FBTyxDQUFDLGlDQUFELENBQXRCOztBQUNBLElBQUlHLE1BQU0sR0FBRyxJQUFJRCxNQUFKLEVBQWI7QUFFQSxNQUFNRSxZQUFZLEdBQUcsbUZBQXJCO0FBQ0EsTUFBTUMsc0JBQXNCLEdBQUcsbUZBQS9CO0FBQ0EsTUFBTUMsY0FBYyxHQUFHLDhFQUF2QjtBQUNBLE1BQU1DLFdBQVcsR0FBR0osTUFBTSxDQUFDSyx5QkFBUCxDQUFpQ0osWUFBakMsQ0FBcEI7QUFDQSxNQUFNSyxrQkFBa0IsR0FBR04sTUFBTSxDQUFDSyx5QkFBUCxDQUFpQyxtRkFBakMsQ0FBM0I7QUFFQUUsS0FBSyxDQUFDLFlBQUQsRUFBZSxNQUFNO0FBQ3RCQyxFQUFBQSxJQUFJLENBQUMsZ0RBQUQsRUFBb0RDLElBQUQsSUFBVTtBQUM3RFgsSUFBQUEsTUFBTSxDQUFDWSxLQUFQLENBQWFWLE1BQU0sQ0FBQ1csUUFBUCxDQUFnQlYsWUFBaEIsQ0FBYixFQUE0QyxJQUE1QztB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QUNZLEtBQVAsQ0FBYVYsTUFBTSxDQUFDZ0IsS0FBUCxDQUFhVixrQkFBYixDQUFiLEVBQStDLEtBQS9DO0FBQ0FHLElBQUFBLElBQUk7QUFDUCxHQUhHLENBQUo7QUFLQUQsRUFBQUEsSUFBSSxDQUFDLCtEQUFELEVBQW1FQyxJQUFELElBQVU7QUFDNUUsUUFBSVEsWUFBWSxHQUFHakIsTUFBTSxDQUFDSyx5QkFBUCxDQUFpQyxtRkFBakMsQ0FBbkI7QUFDQVAsSUFBQUEsTUFBTSxDQUFDWSxLQUFQLENBQWFWLE1BQU0sQ0FBQ2dCLEtBQVAsQ0FBYUMsWUFBYixDQUFiLEVBQXlDLG1GQUF6QztBQUNBUixJQUFBQSxJQUFJO0FBQ1AsR0FKRyxDQUFKO0FBS0gsQ0E5REksQ0FBTCIsInNvdXJjZVJvb3QiOiIvVXNlcnMvbmV3X25hbWUvRGVza3RvcC9zdWRva3Ugc29sdmVyL3Rlc3RzLyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNoYWkgPSByZXF1aXJlKCdjaGFpJyk7XG5jb25zdCBhc3NlcnQgPSBjaGFpLmFzc2VydDtcblxuY29uc3QgU29sdmVyID0gcmVxdWlyZSgnLi4vY29udHJvbGxlcnMvc3Vkb2t1LXNvbHZlci5qcycpO1xubGV0IHNvbHZlciA9IG5ldyBTb2x2ZXIoKTtcblxuY29uc3QgcHV6emxlU3RyaW5nID0gJy4uOS4uNS4xLjg1LjQuLi4uMjQzMi4uLi4uLjEuLi42OS44My45Li4uLi42LjYyLjcxLi4uOS4uLi4uLjE5NDUuLi4uNC4zNy40LjMuLjYuLic7XG5jb25zdCBpbnZhbGlkQ2hhcmFjdGVyU3RyaW5nID0gJyQuOS4uNS4xLjg1LjQuLi4uMjQzMi4uLiQuLjEuLi42OS44My45Li4uLi42LjYyLjcxLi4uOS4uLi4uLjE5NDUuLi4uNC4zNy40LjMuLjYuLidcbmNvbnN0IHRvb1Nob3J0U3RyaW5nID0gJzEuNS4uMi44NC4uNjMuMTIuNy4yLi41Li4uLi45Li4xLi4uLjguMi4zNjc0LjMuNy4yLi45LjQ3Li4uOC4uMS4uMTYuLi4uOTI2OTEnO1xuY29uc3QgYXJyYXlTdHJpbmcgPSBzb2x2ZXIuY3JlYXRlVHdvRGltZW5zaW9uYWxBcnJheShwdXp6bGVTdHJpbmcpO1xuY29uc3QgaW52YWxpZEFycmF5U3RyaW5nID0gc29sdmVyLmNyZWF0ZVR3b0RpbWVuc2lvbmFsQXJyYXkoJy4uNS4uNS4xLjg1LjQuLi4uMjQzMi4uNy4uLjEuLi42OS44My45Li4uLi41LjYyLjcxLi4uOS4uLi4zLjE5NDUuLi4uNC4zNy40LjMuLjYuLicpO1xuXG5zdWl0ZSgnVW5pdCBUZXN0cycsICgpID0+IHtcbiAgICB0ZXN0KCdoYW5kbGVzIGEgdmFsaWQgcHV6emxlIHN0cmluZyBvZiA4MSBjaGFyYWN0ZXJzJywgKGRvbmUpID0+IHtcbiAgICAgICAgYXNzZXJ0LmVxdWFsKHNvbHZlci52YWxpZGF0ZShwdXp6bGVTdHJpbmcpLCB0cnVlKTtcbiAgICAgICAgZG9uZSgpO1xuICAgIH0pO1xuICAgIFxuICAgIHRlc3QoJ2hhbmRsZXMgYSBwdXp6bGUgc3RyaW5nIHdpdGggaW52YWxpZCBjaGFyYWN0ZXJzJywgKGRvbmUpID0+IHtcbiAgICAgICAgYXNzZXJ0LmVxdWFsKHNvbHZlci52YWxpZGF0ZShpbnZhbGlkQ2hhcmFjdGVyU3RyaW5nKSwgZmFsc2UpO1xuICAgICAgICBkb25lKCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdoYW5kbGVzIGEgcHV6emxlIHN0cmluZyB0aGF0IGlzIG5vdCA4MSBjaGFyYWN0ZXJzIGluIGxlbmd0aCcsIChkb25lKSA9PiB7XG4gICAgICAgIGFzc2VydC5lcXVhbChzb2x2ZXIudmFsaWRhdGUodG9vU2hvcnRTdHJpbmcpLCBcInRvbyBtYW55IGNoYXJhY3RlcnNcIik7XG4gICAgICAgIGRvbmUoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ0xvZ2ljIGhhbmRsZXMgYSB2YWxpZCByb3cgcGxhY2VtZW50JywgKGRvbmUpID0+IHtcbiAgICAgICAgYXNzZXJ0LmVxdWFsKHNvbHZlci5jaGVja1Jvd1BsYWNlbWVudChhcnJheVN0cmluZywgMCwgMCwgNyksIHRydWUpO1xuICAgICAgICBkb25lKCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdMb2dpYyBoYW5kbGVzIGFuIGludmFsaWQgcm93IHBsYWNlbWVudCcsIChkb25lKSA9PiB7XG4gICAgICAgIGFzc2VydC5lcXVhbChzb2x2ZXIuY2hlY2tSb3dQbGFjZW1lbnQoYXJyYXlTdHJpbmcsIDAsIDAsIDUpLCBmYWxzZSk7XG4gICAgICAgIGRvbmUoKTtcbiAgICB9KVxuXG4gICAgdGVzdCgnTG9naWMgaGFuZGxlcyBhIHZhbGlkIGNvbHVtbiBwbGFjZW1lbnQnLCAoZG9uZSkgPT4ge1xuICAgICAgICBhc3NlcnQuZXF1YWwoc29sdmVyLmNoZWNrQ29sUGxhY2VtZW50KGFycmF5U3RyaW5nLCAwLCAwLCA3KSwgdHJ1ZSk7XG4gICAgICAgIGRvbmUoKTtcbiAgICB9KVxuXG4gICAgdGVzdCgnTG9naWMgaGFuZGxlcyBhbiBpbnZhbGlkIGNvbHVtbiBwbGFjZW1lbnQnLCAoZG9uZSkgPT4ge1xuICAgICAgICBhc3NlcnQuZXF1YWwoc29sdmVyLmNoZWNrQ29sUGxhY2VtZW50KGFycmF5U3RyaW5nLCAwLCAwLCA1KSwgZmFsc2UpO1xuICAgICAgICBkb25lKCk7XG4gICAgfSlcblxuICAgIHRlc3QoJ0xvZ2ljIGhhbmRsZXMgYSB2YWxpZCByZWdpb24gKDN4MyBncmlkKSBwbGFjZW1lbnQnLCAoZG9uZSkgPT4ge1xuICAgICAgICBhc3NlcnQuZXF1YWwoc29sdmVyLmNoZWNrUmVnaW9uUGxhY2VtZW50KGFycmF5U3RyaW5nLCAwLCAwLCA3KSwgdHJ1ZSk7XG4gICAgICAgIGRvbmUoKTtcbiAgICB9KVxuXG4gICAgdGVzdCgnTG9naWMgaGFuZGxlcyBhbiBpbnZhbGlkIHJlZ2lvbiAoM3gzIGdyaWQpIHBsYWNlbWVudCcsIChkb25lKSA9PiB7XG4gICAgICAgIGFzc2VydC5lcXVhbChzb2x2ZXIuY2hlY2tSZWdpb25QbGFjZW1lbnQoYXJyYXlTdHJpbmcsIDAsIDAsIDUpLCBmYWxzZSk7XG4gICAgICAgIGRvbmUoKTtcbiAgICB9KVxuXG4gICAgdGVzdCgnVmFsaWQgcHV6emxlIHN0cmluZ3MgcGFzcyB0aGUgc29sdmVyJywgKGRvbmUpID0+IHtcbiAgICAgICAgbGV0IGFycmF5U3RyaW5nMSA9IHNvbHZlci5jcmVhdGVUd29EaW1lbnNpb25hbEFycmF5KCc1Li45MTM3Mi4zLi4uOC41LjkuOS4yNS4uOC42OC40Ny4yMy4uLjk1Li40Ni43LjQuLi4uLjUuMi4uLi4uLi40Li44OTE2Li44NS43Mi4uLjMnKTtcbiAgICAgICAgYXNzZXJ0LmVxdWFsKHNvbHZlci5zb2x2ZShhcnJheVN0cmluZzEpLCAnNTY4OTEzNzI0MzQyNjg3NTE5MTk3MjU0Mzg2Njg1NDc5MjMxMjE5NTM4NDY3NzM0MTYyODk1OTI2MzQ1MTc4NDczODkxNjUyODUxNzI2OTQzJyk7XG4gICAgICAgIGRvbmUoKTtcbiAgICB9KVxuXG4gICAgdGVzdCgnSW52YWxpZCBwdXp6bGUgc3RyaW5ncyBmYWlsIHRoZSBzb2x2ZXInLCAoZG9uZSkgPT4ge1xuICAgICAgICBhc3NlcnQuZXF1YWwoc29sdmVyLnNvbHZlKGludmFsaWRBcnJheVN0cmluZyksIGZhbHNlKTtcbiAgICAgICAgZG9uZSgpO1xuICAgIH0pXG5cbiAgICB0ZXN0KCdTb2x2ZXIgcmV0dXJucyB0aGUgZXhwZWN0ZWQgc29sdXRpb24gZm9yIGFuIGluY29tcGxldGUgcHV6emxlJywgKGRvbmUpID0+IHtcbiAgICAgICAgbGV0IGFycmF5U3RyaW5nMiA9IHNvbHZlci5jcmVhdGVUd29EaW1lbnNpb25hbEFycmF5KCcuLjgzOS43LjU3NS4uLi4uOTY0Li4xLi4uLi4uLjE2LjI5ODQ2LjkuMzEyLjcuLjc1NC4uLi4uNjIuLjUuNzguOC4uLjMuMi4uLjQ5Mi4uLjEnKVxuICAgICAgICBhc3NlcnQuZXF1YWwoc29sdmVyLnNvbHZlKGFycmF5U3RyaW5nMiksICcyMTgzOTY3NDU3NTMyODQxOTY0OTYxNTc4MzI1MzE2NzI5ODQ2NDk4MzEyNTc4Mjc1NDk2MTM5NjI0MTUzNzgxODU3NjM0MjkzNzQ5Mjg1NjEnKTtcbiAgICAgICAgZG9uZSgpO1xuICAgIH0pXG59KTtcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "1_unit-tests.js"
      ],
      "names": [
        "chai",
        "require",
        "assert",
        "Solver",
        "solver",
        "puzzleString",
        "invalidCharacterString",
        "tooShortString",
        "arrayString",
        "createTwoDimensionalArray",
        "invalidArrayString",
        "suite",
        "test",
        "done",
        "equal",
        "validate",
        "checkRowPlacement",
        "checkColPlacement",
        "checkRegionPlacement",
        "arrayString1",
        "solve",
        "arrayString2"
      ],
      "mappings": "AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,MAAM,GAAGF,IAAI,CAACE,MAApB;;AAEA,MAAMC,MAAM,GAAGF,OAAO,CAAC,iCAAD,CAAtB;;AACA,IAAIG,MAAM,GAAG,IAAID,MAAJ,EAAb;AAEA,MAAME,YAAY,GAAG,mFAArB;AACA,MAAMC,sBAAsB,GAAG,mFAA/B;AACA,MAAMC,cAAc,GAAG,8EAAvB;AACA,MAAMC,WAAW,GAAGJ,MAAM,CAACK,yBAAP,CAAiCJ,YAAjC,CAApB;AACA,MAAMK,kBAAkB,GAAGN,MAAM,CAACK,yBAAP,CAAiC,mFAAjC,CAA3B;AAEAE,KAAK,CAAC,YAAD,EAAe,MAAM;AACtBC,EAAAA,IAAI,CAAC,gDAAD,EAAoDC,IAAD,IAAU;AAC7DX,IAAAA,MAAM,CAACY,KAAP,CAAaV,MAAM,CAACW,QAAP,CAAgBV,YAAhB,CAAb,EAA4C,IAA5C;AACAQ,IAAAA,IAAI;AACP,GAHG,CAAJ;AAKAD,EAAAA,IAAI,CAAC,iDAAD,EAAqDC,IAAD,IAAU;AAC9DX,IAAAA,MAAM,CAACY,KAAP,CAAaV,MAAM,CAACW,QAAP,CAAgBT,sBAAhB,CAAb,EAAsD,KAAtD;AACAO,IAAAA,IAAI;AACP,GAHG,CAAJ;AAKAD,EAAAA,IAAI,CAAC,6DAAD,EAAiEC,IAAD,IAAU;AAC1EX,IAAAA,MAAM,CAACY,KAAP,CAAaV,MAAM,CAACW,QAAP,CAAgBR,cAAhB,CAAb,EAA8C,qBAA9C;AACAM,IAAAA,IAAI;AACP,GAHG,CAAJ;AAKAD,EAAAA,IAAI,CAAC,qCAAD,EAAyCC,IAAD,IAAU;AAClDX,IAAAA,MAAM,CAACY,KAAP,CAAaV,MAAM,CAACY,iBAAP,CAAyBR,WAAzB,EAAsC,CAAtC,EAAyC,CAAzC,EAA4C,CAA5C,CAAb,EAA6D,IAA7D;AACAK,IAAAA,IAAI;AACP,GAHG,CAAJ;AAKAD,EAAAA,IAAI,CAAC,wCAAD,EAA4CC,IAAD,IAAU;AACrDX,IAAAA,MAAM,CAACY,KAAP,CAAaV,MAAM,CAACY,iBAAP,CAAyBR,WAAzB,EAAsC,CAAtC,EAAyC,CAAzC,EAA4C,CAA5C,CAAb,EAA6D,KAA7D;AACAK,IAAAA,IAAI;AACP,GAHG,CAAJ;AAKAD,EAAAA,IAAI,CAAC,wCAAD,EAA4CC,IAAD,IAAU;AACrDX,IAAAA,MAAM,CAACY,KAAP,CAAaV,MAAM,CAACa,iBAAP,CAAyBT,WAAzB,EAAsC,CAAtC,EAAyC,CAAzC,EAA4C,CAA5C,CAAb,EAA6D,IAA7D;AACAK,IAAAA,IAAI;AACP,GAHG,CAAJ;AAKAD,EAAAA,IAAI,CAAC,2CAAD,EAA+CC,IAAD,IAAU;AACxDX,IAAAA,MAAM,CAACY,KAAP,CAAaV,MAAM,CAACa,iBAAP,CAAyBT,WAAzB,EAAsC,CAAtC,EAAyC,CAAzC,EAA4C,CAA5C,CAAb,EAA6D,KAA7D;AACAK,IAAAA,IAAI;AACP,GAHG,CAAJ;AAKAD,EAAAA,IAAI,CAAC,mDAAD,EAAuDC,IAAD,IAAU;AAChEX,IAAAA,MAAM,CAACY,KAAP,CAAaV,MAAM,CAACc,oBAAP,CAA4BV,WAA5B,EAAyC,CAAzC,EAA4C,CAA5C,EAA+C,CAA/C,CAAb,EAAgE,IAAhE;AACAK,IAAAA,IAAI;AACP,GAHG,CAAJ;AAKAD,EAAAA,IAAI,CAAC,sDAAD,EAA0DC,IAAD,IAAU;AACnEX,IAAAA,MAAM,CAACY,KAAP,CAAaV,MAAM,CAACc,oBAAP,CAA4BV,WAA5B,EAAyC,CAAzC,EAA4C,CAA5C,EAA+C,CAA/C,CAAb,EAAgE,KAAhE;AACAK,IAAAA,IAAI;AACP,GAHG,CAAJ;AAKAD,EAAAA,IAAI,CAAC,sCAAD,EAA0CC,IAAD,IAAU;AACnD,QAAIM,YAAY,GAAGf,MAAM,CAACK,yBAAP,CAAiC,mFAAjC,CAAnB;AACAP,IAAAA,MAAM,CAACY,KAAP,CAAaV,MAAM,CAACgB,KAAP,CAAaD,YAAb,CAAb,EAAyC,mFAAzC;AACAN,IAAAA,IAAI;AACP,GAJG,CAAJ;AAMAD,EAAAA,IAAI,CAAC,wCAAD,EAA4CC,IAAD,IAAU;AACrDX,IAAAA,MAAM,CAACY,KAAP,CAAaV,MAAM,CAACgB,KAAP,CAAaV,kBAAb,CAAb,EAA+C,KAA/C;AACAG,IAAAA,IAAI;AACP,GAHG,CAAJ;AAKAD,EAAAA,IAAI,CAAC,+DAAD,EAAmEC,IAAD,IAAU;AAC5E,QAAIQ,YAAY,GAAGjB,MAAM,CAACK,yBAAP,CAAiC,mFAAjC,CAAnB;AACAP,IAAAA,MAAM,CAACY,KAAP,CAAaV,MAAM,CAACgB,KAAP,CAAaC,YAAb,CAAb,EAAyC,mFAAzC;AACAR,IAAAA,IAAI;AACP,GAJG,CAAJ;AAKH,CA9DI,CAAL",
      "sourceRoot": "/Users/new_name/Desktop/sudoku solver/tests/",
      "sourcesContent": [
        "const chai = require('chai');\nconst assert = chai.assert;\n\nconst Solver = require('../controllers/sudoku-solver.js');\nlet solver = new Solver();\n\nconst puzzleString = '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..';\nconst invalidCharacterString = '$.9..5.1.85.4....2432...$..1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..'\nconst tooShortString = '1.5..2.84..63.12.7.2..5.....9..1....8.2.3674.3.7.2..9.47...8..1..16....92691';\nconst arrayString = solver.createTwoDimensionalArray(puzzleString);\nconst invalidArrayString = solver.createTwoDimensionalArray('..5..5.1.85.4....2432..7...1...69.83.9.....5.62.71...9....3.1945....4.37.4.3..6..');\n\nsuite('Unit Tests', () => {\n    test('handles a valid puzzle string of 81 characters', (done) => {\n        assert.equal(solver.validate(puzzleString), true);\n        done();\n    });\n    \n    test('handles a puzzle string with invalid characters', (done) => {\n        assert.equal(solver.validate(invalidCharacterString), false);\n        done();\n    });\n\n    test('handles a puzzle string that is not 81 characters in length', (done) => {\n        assert.equal(solver.validate(tooShortString), \"too many characters\");\n        done();\n    });\n\n    test('Logic handles a valid row placement', (done) => {\n        assert.equal(solver.checkRowPlacement(arrayString, 0, 0, 7), true);\n        done();\n    });\n\n    test('Logic handles an invalid row placement', (done) => {\n        assert.equal(solver.checkRowPlacement(arrayString, 0, 0, 5), false);\n        done();\n    })\n\n    test('Logic handles a valid column placement', (done) => {\n        assert.equal(solver.checkColPlacement(arrayString, 0, 0, 7), true);\n        done();\n    })\n\n    test('Logic handles an invalid column placement', (done) => {\n        assert.equal(solver.checkColPlacement(arrayString, 0, 0, 5), false);\n        done();\n    })\n\n    test('Logic handles a valid region (3x3 grid) placement', (done) => {\n        assert.equal(solver.checkRegionPlacement(arrayString, 0, 0, 7), true);\n        done();\n    })\n\n    test('Logic handles an invalid region (3x3 grid) placement', (done) => {\n        assert.equal(solver.checkRegionPlacement(arrayString, 0, 0, 5), false);\n        done();\n    })\n\n    test('Valid puzzle strings pass the solver', (done) => {\n        let arrayString1 = solver.createTwoDimensionalArray('5..91372.3...8.5.9.9.25..8.68.47.23...95..46.7.4.....5.2.......4..8916..85.72...3');\n        assert.equal(solver.solve(arrayString1), '568913724342687519197254386685479231219538467734162895926345178473891652851726943');\n        done();\n    })\n\n    test('Invalid puzzle strings fail the solver', (done) => {\n        assert.equal(solver.solve(invalidArrayString), false);\n        done();\n    })\n\n    test('Solver returns the expected solution for an incomplete puzzle', (done) => {\n        let arrayString2 = solver.createTwoDimensionalArray('..839.7.575.....964..1.......16.29846.9.312.7..754.....62..5.78.8...3.2...492...1')\n        assert.equal(solver.solve(arrayString2), '218396745753284196496157832531672984649831257827549613962415378185763429374928561');\n        done();\n    })\n});\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1705097952281
  },
  "{\"sourceRoot\":\"/Users/new_name/Desktop/sudoku solver/tests/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/new_name/Desktop/sudoku solver\",\"filename\":\"/Users/new_name/Desktop/sudoku solver/tests/2_functional-tests.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/new_name/Desktop/sudoku solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/new_name/Desktop/sudoku solver/tests/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/new_name/Desktop/sudoku solver",
      "filename": "/Users/new_name/Desktop/sudoku solver/tests/2_functional-tests.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/new_name/Desktop/sudoku solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/new_name/Desktop/sudoku solver/tests/2_functional-tests.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/new_name/Desktop/sudoku solver/tests/2_functional-tests.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/new_name/Desktop/sudoku solver/tests/",
        "sourceFileName": "2_functional-tests.js"
      }
    },
    "ast": null,
    "code": "const chai = require(\"chai\");\n\nconst chaiHttp = require('chai-http');\n\nconst assert = chai.assert;\n\nconst server = require('../server');\n\nchai.use(chaiHttp);\nsuite('Functional Tests', () => {\n  test('POST: /api/solve - Solve a puzzle with valid puzzle string', done => {\n    chai.request(server).post('/api/solve').send({\n      puzzle: '1.5..2.84..63.12.7.2..5.....9..1....8.2.3674.3.7.2..9.47...8..1..16....926914.37.'\n    }).end(function (err, res) {\n      assert.equal(res.status, 200);\n      assert.equal(res.body.solution, '135762984946381257728459613694517832812936745357824196473298561581673429269145378');\n      done();\n    });\n  });\n  test('POST: /api/solve - Solve a puzzle with missing puzzle string', done => {\n    chai.request(server).post('/api/solve').send({}).end(function (err, res) {\n      assert.equal(res.status, 200);\n      assert.equal(res.body.error, 'Required field missing');\n      done();\n    });\n  });\n  test('POST: /api/solve - Solve a puzzle with invalid characters', done => {\n    chai.request(server).post('/api/solve').send({\n      puzzle: '1.5..2.!4..63.12.7.2..5.....$..1....8.2.3674.3.7.2..9.47...%..1..16....926914.37.'\n    }).end(function (err, res) {\n      assert.equal(res.status, 200);\n      assert.equal(res.body.error, 'Invalid characters in puzzle');\n      done();\n    });\n  });\n  test('POST: /api/solve - Solve a puzzle with incorrect length', done => {\n    chai.request(server).post('/api/solve').send({\n      puzzle: '1.5..2.!4..63.12.7.2..5.....$..1....8.2.3674.3.7.2..9.47'\n    }).end(function (err, res) {\n      assert.equal(res.status, 200);\n      assert.equal(res.body.error, 'Expected puzzle to be 81 characters long');\n      done();\n    });\n  });\n  test('POST: /api/solve - Solve a puzzle that cannot be solved', done => {\n    chai.request(server).post('/api/solve').send({\n      puzzle: '1.5..2.34..63.12.7.2..556...9..1....8.2.3374.3.7.2..9.47...8.21..16....996914.37.'\n    }).end(function (err, res) {\n      assert.equal(res.status, 200);\n      assert.equal(res.body.error, 'Puzzle cannot be solved');\n      done();\n    });\n  });\n  test('POST: /api/check - Check a puzzle placement with all fields', done => {\n    chai.request(server).post('/api/check').send({\n      puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..',\n      coordinate: 'A1',\n      value: '7'\n    }).end(function (err, res) {\n      assert.equal(res.status, 200);\n      assert.equal(res.body.valid, true);\n      done();\n    });\n  });\n  test('POST: /api/check - Check a puzzle placement with single placement conflict', done => {\n    chai.request(server).post('/api/check').send({\n      puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..',\n      coordinate: 'A1',\n      value: '6'\n    }).end(function (err, res) {\n      assert.equal(res.status, 200);\n      assert.equal(res.body.valid, false);\n      assert.equal(res.body.conflict.length, 1);\n      done();\n    });\n  });\n  test('POST: /api/check - Check a puzzle placement with multiple placement conflicts', done => {\n    chai.request(server).post('/api/check').send({\n      puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..',\n      coordinate: 'A1',\n      value: '1'\n    }).end(function (err, res) {\n      assert.equal(res.status, 200);\n      assert.equal(res.body.valid, false);\n      assert.equal(res.body.conflict.length, 2);\n      done();\n    });\n  });\n  test('POST: /api/check - Check a puzzle placement with all placement conflicts', done => {\n    chai.request(server).post('/api/check').send({\n      puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..',\n      coordinate: 'A1',\n      value: '5'\n    }).end(function (err, res) {\n      assert.equal(res.status, 200);\n      assert.equal(res.body.valid, false);\n      assert.equal(res.body.conflict.length, 3);\n      done();\n    });\n  });\n  test('POST: /api/check - Check a puzzle placement with missing required fields', done => {\n    chai.request(server).post('/api/check').send({\n      puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..',\n      value: '5'\n    }).end(function (err, res) {\n      assert.equal(res.status, 200);\n      assert.equal(res.body.error, 'Required field(s) missing');\n      done();\n    });\n  });\n  test('POST: /api/check - Check a puzzle placement with invalid characters', done => {\n    chai.request(server).post('/api/check').send({\n      puzzle: '..9..5.1.85.4....2%32......1...69.83.9..$..6.62.71...9....!.1945....4.37.4.3..6..',\n      coordinate: 'A1',\n      value: '5'\n    }).end(function (err, res) {\n      assert.equal(res.status, 200);\n      assert.equal(res.body.error, 'Invalid characters in puzzle');\n      done();\n    });\n  });\n  test('POST: /api/check - Check a puzzle placement with incorrect length', done => {\n    chai.request(server).post('/api/check').send({\n      puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9.',\n      coordinate: 'A1',\n      value: '5'\n    }).end(function (err, res) {\n      assert.equal(res.status, 200);\n      assert.equal(res.body.error, 'Expected puzzle to be 81 characters long');\n      done();\n    });\n  });\n  test('POST: /api/check - Check a puzzle placement with invalid placement coordinate', done => {\n    chai.request(server).post('/api/check').send({\n      puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..',\n      coordinate: 'S1',\n      value: '5'\n    }).end(function (err, res) {\n      assert.equal(res.status, 200);\n      assert.equal(res.body.error, \"Invalid coordinate\");\n      done();\n    });\n  });\n  test('POST; /api/check - Check a puzzle placement with invalid placement value', done => {\n    chai.request(server).post('/api/check').send({\n      puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..',\n      coordinate: 'A1',\n      value: '23'\n    }).end(function (err, res) {\n      assert.equal(res.status, 200);\n      assert.equal(res.body.error, \"Invalid value\");\n      done();\n    });\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "2_functional-tests.js"
      ],
      "names": [
        "chai",
        "require",
        "chaiHttp",
        "assert",
        "server",
        "use",
        "suite",
        "test",
        "done",
        "request",
        "post",
        "send",
        "puzzle",
        "end",
        "err",
        "res",
        "equal",
        "status",
        "body",
        "solution",
        "error",
        "coordinate",
        "value",
        "valid",
        "conflict",
        "length"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/new_name/Desktop/sudoku solver/tests/",
      "sourcesContent": [
        "const chai = require(\"chai\");\nconst chaiHttp = require('chai-http');\nconst assert = chai.assert;\nconst server = require('../server');\n\nchai.use(chaiHttp);\n\nsuite('Functional Tests', () => {\n    test('POST: /api/solve - Solve a puzzle with valid puzzle string', (done) => {\n        chai.request(server)\n            .post('/api/solve')\n            .send({ puzzle: '1.5..2.84..63.12.7.2..5.....9..1....8.2.3674.3.7.2..9.47...8..1..16....926914.37.' })\n            .end(function(err, res) {\n                assert.equal(res.status, 200);\n                assert.equal(res.body.solution, '135762984946381257728459613694517832812936745357824196473298561581673429269145378');\n                done();\n            });\n    });\n\n    test('POST: /api/solve - Solve a puzzle with missing puzzle string', (done) => {\n        chai.request(server)\n            .post('/api/solve')\n            .send({})\n            .end(function(err, res) {\n                assert.equal(res.status, 200);\n                assert.equal(res.body.error, 'Required field missing');\n                done();\n            });\n    });\n\n    test('POST: /api/solve - Solve a puzzle with invalid characters', (done) => {\n        chai.request(server)\n            .post('/api/solve')\n            .send({ puzzle: '1.5..2.!4..63.12.7.2..5.....$..1....8.2.3674.3.7.2..9.47...%..1..16....926914.37.' })\n            .end(function(err, res) {\n                assert.equal(res.status, 200);\n                assert.equal(res.body.error, 'Invalid characters in puzzle');\n                done();\n            });\n    })\n\n    test('POST: /api/solve - Solve a puzzle with incorrect length', (done) => {\n        chai.request(server)\n            .post('/api/solve')\n            .send({ puzzle: '1.5..2.!4..63.12.7.2..5.....$..1....8.2.3674.3.7.2..9.47' })\n            .end(function(err, res) {\n                assert.equal(res.status, 200);\n                assert.equal(res.body.error, 'Expected puzzle to be 81 characters long');\n                done();\n            });\n    })\n\n    test('POST: /api/solve - Solve a puzzle that cannot be solved', (done) => {\n        chai.request(server)\n            .post('/api/solve')\n            .send({ puzzle: '1.5..2.34..63.12.7.2..556...9..1....8.2.3374.3.7.2..9.47...8.21..16....996914.37.' })\n            .end(function(err, res) {\n                assert.equal(res.status, 200);\n                assert.equal(res.body.error, 'Puzzle cannot be solved');\n                done();\n            });\n    })\n\n    test('POST: /api/check - Check a puzzle placement with all fields', (done) => {\n        chai.request(server)\n            .post('/api/check')\n            .send({ puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..', coordinate: 'A1', value: '7' })\n            .end(function(err, res) {\n                assert.equal(res.status, 200);\n                assert.equal(res.body.valid, true);\n                done();\n            });\n    });\n\n    test('POST: /api/check - Check a puzzle placement with single placement conflict', (done) => {\n        chai.request(server)\n            .post('/api/check')\n            .send({ puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..', coordinate: 'A1', value: '6' })\n            .end(function(err, res) {\n                assert.equal(res.status, 200);\n                assert.equal(res.body.valid, false);\n                assert.equal(res.body.conflict.length, 1);\n                done();\n            });\n    })\n\n    test('POST: /api/check - Check a puzzle placement with multiple placement conflicts', (done) => {\n        chai.request(server)\n            .post('/api/check')\n            .send({ puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..', coordinate: 'A1', value: '1' })\n            .end(function(err, res) {\n                assert.equal(res.status, 200);\n                assert.equal(res.body.valid, false);\n                assert.equal(res.body.conflict.length, 2);\n                done();\n            });\n    })\n\n    test('POST: /api/check - Check a puzzle placement with all placement conflicts', (done) => {\n        chai.request(server)\n            .post('/api/check')\n            .send({ puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..', coordinate: 'A1', value: '5' })\n            .end(function(err, res) {\n                assert.equal(res.status, 200);\n                assert.equal(res.body.valid, false);\n                assert.equal(res.body.conflict.length, 3);\n                done();\n            });\n    })\n\n    test('POST: /api/check - Check a puzzle placement with missing required fields', (done) => {\n        chai.request(server)\n            .post('/api/check')\n            .send({ puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..', value: '5' })\n            .end(function(err, res) {\n                assert.equal(res.status, 200);\n                assert.equal(res.body.error, 'Required field(s) missing');\n                done();\n            });\n    })\n\n    test('POST: /api/check - Check a puzzle placement with invalid characters', (done) => {\n        chai.request(server)\n            .post('/api/check')\n            .send({ puzzle: '..9..5.1.85.4....2%32......1...69.83.9..$..6.62.71...9....!.1945....4.37.4.3..6..', coordinate: 'A1', value: '5' })\n            .end(function(err, res) {\n                assert.equal(res.status, 200);\n                assert.equal(res.body.error, 'Invalid characters in puzzle');\n                done();\n            });\n    })\n\n    test('POST: /api/check - Check a puzzle placement with incorrect length', (done) => {\n        chai.request(server)\n            .post('/api/check')\n            .send({ puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9.', coordinate: 'A1', value: '5' })\n            .end(function(err, res) {\n                assert.equal(res.status, 200);\n                assert.equal(res.body.error, 'Expected puzzle to be 81 characters long');\n                done();\n            });\n    })\n\n    test('POST: /api/check - Check a puzzle placement with invalid placement coordinate', (done) => {\n        chai.request(server)\n            .post('/api/check')\n            .send({ puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..', coordinate: 'S1', value: '5' })\n            .end(function(err, res) {\n                assert.equal(res.status, 200);\n                assert.equal(res.body.error, \"Invalid coordinate\");\n                done();\n            });\n    })\n\n    test('POST; /api/check - Check a puzzle placement with invalid placement value', (done) => {\n        chai.request(server)\n            .post('/api/check')\n            .send({ puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..', coordinate: 'A1', value: '23' })\n            .end(function(err, res) {\n                assert.equal(res.status, 200);\n                assert.equal(res.body.error, \"Invalid value\");\n                done();\n            });\n    })\n});\n\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1705179483602
  },
  "{\"sourceRoot\":\"/Users/new_name/Desktop/sudoku solver/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/new_name/Desktop/sudoku solver\",\"filename\":\"/Users/new_name/Desktop/sudoku solver/server.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/new_name/Desktop/sudoku solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/new_name/Desktop/sudoku solver/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/new_name/Desktop/sudoku solver",
      "filename": "/Users/new_name/Desktop/sudoku solver/server.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/new_name/Desktop/sudoku solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/new_name/Desktop/sudoku solver/server.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/new_name/Desktop/sudoku solver/server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/new_name/Desktop/sudoku solver/",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "require('dotenv').config();\n\nconst express = require('express');\n\nconst bodyParser = require('body-parser');\n\nconst expect = require('chai').expect;\n\nconst cors = require('cors');\n\nconst fccTestingRoutes = require('./routes/fcctesting.js');\n\nconst apiRoutes = require('./routes/api.js');\n\nconst runner = require('./test-runner');\n\nconst app = express();\napp.use('/public', express.static(process.cwd() + '/public'));\napp.use(cors({\n  origin: '*'\n})); //For FCC testing purposes only\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: true\n})); //Index page (static HTML)\n\napp.route('/').get(function (req, res) {\n  res.sendFile(process.cwd() + '/views/index.html');\n}); //For FCC testing purposes\n\nfccTestingRoutes(app); // User routes\n\napiRoutes(app); //404 Not Found Middleware\n\napp.use(function (req, res, next) {\n  res.status(404).type('text').send('Not Found');\n}); //Start our server and tests!\n\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, function () {\n  console.log(\"Listening on port \" + PORT); // process.env.NODE_ENV='test'\n\n  if (process.env.NODE_ENV === 'test') {\n    console.log('Running Tests...');\n    setTimeout(function () {\n      try {\n        runner.run();\n      } catch (error) {\n        console.log('Tests are not valid:');\n        console.error(error);\n      }\n    }, 1500);\n  }\n});\nmodule.exports = app; // for testing\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiY29uZmlnIiwiZXhwcmVzcyIsImJvZHlQYXJzZXIiLCJleHBlY3QiLCJjb3JzIiwiZmNjVGVzdGluZ1JvdXRlcyIsImFwaVJvdXRlcyIsInJ1bm5lciIsImFwcCIsInVzZSIsInN0YXRpYyIsInByb2Nlc3MiLCJjd2QiLCJvcmlnaW4iLCJqc29uIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwicm91dGUiLCJnZXQiLCJyZXEiLCJyZXMiLCJzZW5kRmlsZSIsIm5leHQiLCJzdGF0dXMiLCJ0eXBlIiwic2VuZCIsIlBPUlQiLCJlbnYiLCJsaXN0ZW4iLCJjb25zb2xlIiwibG9nIiwiTk9ERV9FTlYiLCJzZXRUaW1lb3V0IiwicnVuIiwiZXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQUEsT0FBTyxDQUFDLFFBQUQsQ0FBUCxDQUFrQkMsTUFBbEI7O0FBQ0EsTUFBTUMsT0FBTyxHQUFPRixPQUFPLENBQUMsU0FBRCxDQUEzQjs7QUFDQSxNQUFNRyxVQUFVLEdBQUlILE9BQU8sQ0FBQyxhQUFELENBQTNCOztBQUNBLE1BQU1JLE1BQU0sR0FBUUosT0FBTyxDQUFDLE1BQUQsQ0FBUCxDQUFnQkksTUFBcEM7O0FBQ0EsTUFBTUMsSUFBSSxHQUFVTCxPQUFPLENBQUMsTUFBRCxDQUEzQjs7QUFFQSxNQUFNTSxnQkFBZ0IsR0FBSU4sT0FBTyxDQUFDLHdCQUFELENBQWpDOztBQUNBLE1BQU1PLFNBQVMsR0FBV1AsT0FBTyxDQUFDLGlCQUFELENBQWpDOztBQUNBLE1BQU1RLE1BQU0sR0FBY1IsT0FBTyxDQUFDLGVBQUQsQ0FBakM7O0FBRUEsTUFBTVMsR0FBRyxHQUFHUCxPQUFPLEVBQW5CO0FBRUFPLEdBQUcsQ0FBQ0MsR0FBSixDQUFRLFNBQVIsRUFBbUJSLE9BQU8sQ0FBQ1MsTUFBUixDQUFlQyxPQUFPLENBQUNDLEdBQVIsS0FBZ0IsU0FBL0IsQ0FBbkI7QUFDQUosR0FBRyxDQUFDQyxHQUFKLENBQVFMLElBQUksQ0FBQztBQUFDUyxFQUFBQSxNQUFNLEVBQUU7QUFBVCxDQUFELENBQVosRSxDQUE4Qjs7QUFFOUJMLEdBQUcsQ0FBQ0MsR0FBSixDQUFRUCxVQUFVLENBQUNZLElBQVgsRUFBUjtBQUNBTixHQUFHLENBQUNDLEdBQUosQ0FBUVAsVUFBVSxDQUFDYSxVQUFYLENBQXNCO0FBQUVDLEVBQUFBLFFBQVEsRUFBRTtBQUFaLENBQXRCLENBQVIsRSxDQUVBOztBQUNBUixHQUFHLENBQUNTLEtBQUosQ0FBVSxHQUFWLEVBQ0dDLEdBREgsQ0FDTyxVQUFVQyxHQUFWLEVBQWVDLEdBQWYsRUFBb0I7QUFDdkJBLEVBQUFBLEdBQUcsQ0FBQ0MsUUFBSixDQUFhVixPQUFPLENBQUNDLEdBQVIsS0FBZ0IsbUJBQTdCO0FBQ0QsQ0FISCxFLENBS0E7O0FBQ0FQLGdCQUFnQixDQUFDRyxHQUFELENBQWhCLEMsQ0FFQTs7QUFDQUYsU0FBUyxDQUFDRSxHQUFELENBQVQsQyxDQUVBOztBQUNBQSxHQUFHLENBQUNDLEdBQUosQ0FBUSxVQUFTVSxHQUFULEVBQWNDLEdBQWQsRUFBbUJFLElBQW5CLEVBQXlCO0FBQy9CRixFQUFBQSxHQUFHLENBQUNHLE1BQUosQ0FBVyxHQUFYLEVBQ0dDLElBREgsQ0FDUSxNQURSLEVBRUdDLElBRkgsQ0FFUSxXQUZSO0FBR0QsQ0FKRCxFLENBTUE7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHZixPQUFPLENBQUNnQixHQUFSLENBQVlELElBQVosSUFBb0IsSUFBakM7QUFDQWxCLEdBQUcsQ0FBQ29CLE1BQUosQ0FBV0YsSUFBWCxFQUFpQixZQUFZO0FBQzNCRyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSx1QkFBdUJKLElBQW5DLEVBRDJCLENBRTNCOztBQUNBLE1BQUlmLE9BQU8sQ0FBQ2dCLEdBQVIsQ0FBWUksUUFBWixLQUF1QixNQUEzQixFQUFtQztBQUNqQ0YsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksa0JBQVo7QUFDQUUsSUFBQUEsVUFBVSxDQUFDLFlBQVk7QUFDckIsVUFBSTtBQUNGekIsUUFBQUEsTUFBTSxDQUFDMEIsR0FBUDtBQUNELE9BRkQsQ0FFRSxPQUFPQyxLQUFQLEVBQWM7QUFDZEwsUUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksc0JBQVo7QUFDQUQsUUFBQUEsT0FBTyxDQUFDSyxLQUFSLENBQWNBLEtBQWQ7QUFDRDtBQUNGLEtBUFMsRUFPUCxJQVBPLENBQVY7QUFRRDtBQUNGLENBZEQ7QUFnQkFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjVCLEdBQWpCLEMsQ0FBc0IiLCJzb3VyY2VSb290IjoiL1VzZXJzL25ld19uYW1lL0Rlc2t0b3Avc3Vkb2t1IHNvbHZlci8iLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCdkb3RlbnYnKS5jb25maWcoKTtcbmNvbnN0IGV4cHJlc3MgICAgID0gcmVxdWlyZSgnZXhwcmVzcycpO1xuY29uc3QgYm9keVBhcnNlciAgPSByZXF1aXJlKCdib2R5LXBhcnNlcicpO1xuY29uc3QgZXhwZWN0ICAgICAgPSByZXF1aXJlKCdjaGFpJykuZXhwZWN0O1xuY29uc3QgY29ycyAgICAgICAgPSByZXF1aXJlKCdjb3JzJyk7XG5cbmNvbnN0IGZjY1Rlc3RpbmdSb3V0ZXMgID0gcmVxdWlyZSgnLi9yb3V0ZXMvZmNjdGVzdGluZy5qcycpO1xuY29uc3QgYXBpUm91dGVzICAgICAgICAgPSByZXF1aXJlKCcuL3JvdXRlcy9hcGkuanMnKTtcbmNvbnN0IHJ1bm5lciAgICAgICAgICAgID0gcmVxdWlyZSgnLi90ZXN0LXJ1bm5lcicpO1xuXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5cbmFwcC51c2UoJy9wdWJsaWMnLCBleHByZXNzLnN0YXRpYyhwcm9jZXNzLmN3ZCgpICsgJy9wdWJsaWMnKSk7XG5hcHAudXNlKGNvcnMoe29yaWdpbjogJyonfSkpOyAvL0ZvciBGQ0MgdGVzdGluZyBwdXJwb3NlcyBvbmx5XG5cbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoeyBleHRlbmRlZDogdHJ1ZSB9KSk7XG5cbi8vSW5kZXggcGFnZSAoc3RhdGljIEhUTUwpXG5hcHAucm91dGUoJy8nKVxuICAuZ2V0KGZ1bmN0aW9uIChyZXEsIHJlcykge1xuICAgIHJlcy5zZW5kRmlsZShwcm9jZXNzLmN3ZCgpICsgJy92aWV3cy9pbmRleC5odG1sJyk7XG4gIH0pO1xuXG4vL0ZvciBGQ0MgdGVzdGluZyBwdXJwb3Nlc1xuZmNjVGVzdGluZ1JvdXRlcyhhcHApO1xuXG4vLyBVc2VyIHJvdXRlc1xuYXBpUm91dGVzKGFwcCk7XG4gICAgXG4vLzQwNCBOb3QgRm91bmQgTWlkZGxld2FyZVxuYXBwLnVzZShmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICByZXMuc3RhdHVzKDQwNClcbiAgICAudHlwZSgndGV4dCcpXG4gICAgLnNlbmQoJ05vdCBGb3VuZCcpO1xufSk7XG5cbi8vU3RhcnQgb3VyIHNlcnZlciBhbmQgdGVzdHMhXG5jb25zdCBQT1JUID0gcHJvY2Vzcy5lbnYuUE9SVCB8fCA1MDAwXG5hcHAubGlzdGVuKFBPUlQsIGZ1bmN0aW9uICgpIHtcbiAgY29uc29sZS5sb2coXCJMaXN0ZW5pbmcgb24gcG9ydCBcIiArIFBPUlQpO1xuICAvLyBwcm9jZXNzLmVudi5OT0RFX0VOVj0ndGVzdCdcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WPT09J3Rlc3QnKSB7XG4gICAgY29uc29sZS5sb2coJ1J1bm5pbmcgVGVzdHMuLi4nKTtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJ1bm5lci5ydW4oKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdUZXN0cyBhcmUgbm90IHZhbGlkOicpO1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgIH1cbiAgICB9LCAxNTAwKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXBwOyAvLyBmb3IgdGVzdGluZ1xuIl19",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "require",
        "config",
        "express",
        "bodyParser",
        "expect",
        "cors",
        "fccTestingRoutes",
        "apiRoutes",
        "runner",
        "app",
        "use",
        "static",
        "process",
        "cwd",
        "origin",
        "json",
        "urlencoded",
        "extended",
        "route",
        "get",
        "req",
        "res",
        "sendFile",
        "next",
        "status",
        "type",
        "send",
        "PORT",
        "env",
        "listen",
        "console",
        "log",
        "NODE_ENV",
        "setTimeout",
        "run",
        "error",
        "module",
        "exports"
      ],
      "mappings": "AAAAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AACA,MAAMC,OAAO,GAAOF,OAAO,CAAC,SAAD,CAA3B;;AACA,MAAMG,UAAU,GAAIH,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAMI,MAAM,GAAQJ,OAAO,CAAC,MAAD,CAAP,CAAgBI,MAApC;;AACA,MAAMC,IAAI,GAAUL,OAAO,CAAC,MAAD,CAA3B;;AAEA,MAAMM,gBAAgB,GAAIN,OAAO,CAAC,wBAAD,CAAjC;;AACA,MAAMO,SAAS,GAAWP,OAAO,CAAC,iBAAD,CAAjC;;AACA,MAAMQ,MAAM,GAAcR,OAAO,CAAC,eAAD,CAAjC;;AAEA,MAAMS,GAAG,GAAGP,OAAO,EAAnB;AAEAO,GAAG,CAACC,GAAJ,CAAQ,SAAR,EAAmBR,OAAO,CAACS,MAAR,CAAeC,OAAO,CAACC,GAAR,KAAgB,SAA/B,CAAnB;AACAJ,GAAG,CAACC,GAAJ,CAAQL,IAAI,CAAC;AAACS,EAAAA,MAAM,EAAE;AAAT,CAAD,CAAZ,E,CAA8B;;AAE9BL,GAAG,CAACC,GAAJ,CAAQP,UAAU,CAACY,IAAX,EAAR;AACAN,GAAG,CAACC,GAAJ,CAAQP,UAAU,CAACa,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR,E,CAEA;;AACAR,GAAG,CAACS,KAAJ,CAAU,GAAV,EACGC,GADH,CACO,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AACvBA,EAAAA,GAAG,CAACC,QAAJ,CAAaV,OAAO,CAACC,GAAR,KAAgB,mBAA7B;AACD,CAHH,E,CAKA;;AACAP,gBAAgB,CAACG,GAAD,CAAhB,C,CAEA;;AACAF,SAAS,CAACE,GAAD,CAAT,C,CAEA;;AACAA,GAAG,CAACC,GAAJ,CAAQ,UAASU,GAAT,EAAcC,GAAd,EAAmBE,IAAnB,EAAyB;AAC/BF,EAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EACGC,IADH,CACQ,MADR,EAEGC,IAFH,CAEQ,WAFR;AAGD,CAJD,E,CAMA;;AACA,MAAMC,IAAI,GAAGf,OAAO,CAACgB,GAAR,CAAYD,IAAZ,IAAoB,IAAjC;AACAlB,GAAG,CAACoB,MAAJ,CAAWF,IAAX,EAAiB,YAAY;AAC3BG,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBJ,IAAnC,EAD2B,CAE3B;;AACA,MAAIf,OAAO,CAACgB,GAAR,CAAYI,QAAZ,KAAuB,MAA3B,EAAmC;AACjCF,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAE,IAAAA,UAAU,CAAC,YAAY;AACrB,UAAI;AACFzB,QAAAA,MAAM,CAAC0B,GAAP;AACD,OAFD,CAEE,OAAOC,KAAP,EAAc;AACdL,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAD,QAAAA,OAAO,CAACK,KAAR,CAAcA,KAAd;AACD;AACF,KAPS,EAOP,IAPO,CAAV;AAQD;AACF,CAdD;AAgBAC,MAAM,CAACC,OAAP,GAAiB5B,GAAjB,C,CAAsB",
      "sourceRoot": "/Users/new_name/Desktop/sudoku solver/",
      "sourcesContent": [
        "require('dotenv').config();\nconst express     = require('express');\nconst bodyParser  = require('body-parser');\nconst expect      = require('chai').expect;\nconst cors        = require('cors');\n\nconst fccTestingRoutes  = require('./routes/fcctesting.js');\nconst apiRoutes         = require('./routes/api.js');\nconst runner            = require('./test-runner');\n\nconst app = express();\n\napp.use('/public', express.static(process.cwd() + '/public'));\napp.use(cors({origin: '*'})); //For FCC testing purposes only\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\n//Index page (static HTML)\napp.route('/')\n  .get(function (req, res) {\n    res.sendFile(process.cwd() + '/views/index.html');\n  });\n\n//For FCC testing purposes\nfccTestingRoutes(app);\n\n// User routes\napiRoutes(app);\n    \n//404 Not Found Middleware\napp.use(function(req, res, next) {\n  res.status(404)\n    .type('text')\n    .send('Not Found');\n});\n\n//Start our server and tests!\nconst PORT = process.env.PORT || 5000\napp.listen(PORT, function () {\n  console.log(\"Listening on port \" + PORT);\n  // process.env.NODE_ENV='test'\n  if (process.env.NODE_ENV==='test') {\n    console.log('Running Tests...');\n    setTimeout(function () {\n      try {\n        runner.run();\n      } catch (error) {\n        console.log('Tests are not valid:');\n        console.error(error);\n      }\n    }, 1500);\n  }\n});\n\nmodule.exports = app; // for testing\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1704995285879
  },
  "{\"sourceRoot\":\"/Users/new_name/Desktop/sudoku solver/routes/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/new_name/Desktop/sudoku solver\",\"filename\":\"/Users/new_name/Desktop/sudoku solver/routes/fcctesting.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"/Users/new_name/Desktop/sudoku solver\",\"plugins\":[],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/new_name/Desktop/sudoku solver/routes/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/new_name/Desktop/sudoku solver",
      "filename": "/Users/new_name/Desktop/sudoku solver/routes/fcctesting.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "/Users/new_name/Desktop/sudoku solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/new_name/Desktop/sudoku solver/routes/fcctesting.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/new_name/Desktop/sudoku solver/routes/fcctesting.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/new_name/Desktop/sudoku solver/routes/",
        "sourceFileName": "fcctesting.js"
      }
    },
    "ast": null,
    "code": "/*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*       DO NOT EDIT THIS FILE\n*       For FCC testing purposes!\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*/\n'use strict';\n\nconst cors = require('cors');\n\nconst fs = require('fs');\n\nconst runner = require('../test-runner');\n\nmodule.exports = function (app) {\n  app.route('/_api/server.js').get(function (req, res, next) {\n    console.log('requested');\n    fs.readFile(__dirname + '/server.js', function (err, data) {\n      if (err) return next(err);\n      res.send(data.toString());\n    });\n  });\n  app.route('/_api/routes/api.js').get(function (req, res, next) {\n    console.log('requested');\n    fs.readFile(__dirname + '/routes/api.js', function (err, data) {\n      if (err) return next(err);\n      res.type('txt').send(data.toString());\n    });\n  });\n  app.route('/_api/controllers/convertHandler.js').get(function (req, res, next) {\n    console.log('requested');\n    fs.readFile(__dirname + '/controllers/convertHandler.js', function (err, data) {\n      if (err) return next(err);\n      res.type('txt').send(data.toString());\n    });\n  });\n  app.get('/_api/get-tests', cors(), function (req, res, next) {\n    console.log('requested');\n    if (process.env.NODE_ENV === 'test') return next();\n    res.json({\n      status: 'unavailable'\n    });\n  }, function (req, res, next) {\n    if (!runner.report) return next();\n    res.json(testFilter(runner.report, req.query.type, req.query.n));\n  }, function (req, res) {\n    runner.on('done', function (report) {\n      process.nextTick(() => res.json(testFilter(runner.report, req.query.type, req.query.n)));\n    });\n  });\n  app.get('/_api/app-info', function (req, res) {\n    let hs = Object.keys(res._headers).filter(h => !h.match(/^access-control-\\w+/));\n    let hObj = {};\n    hs.forEach(h => {\n      hObj[h] = res._headers[h];\n    });\n    delete res._headers['strict-transport-security'];\n    res.json({\n      headers: hObj\n    });\n  });\n};\n\nfunction testFilter(tests, type, n) {\n  let out;\n\n  switch (type) {\n    case 'unit':\n      out = tests.filter(t => t.context.match('Unit Tests'));\n      break;\n\n    case 'functional':\n      out = tests.filter(t => t.context.match('Functional Tests') && !t.title.match('#example'));\n      break;\n\n    default:\n      out = tests;\n  }\n\n  if (n !== undefined) {\n    return out[n] || out;\n  }\n\n  return out;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "fcctesting.js"
      ],
      "names": [
        "cors",
        "require",
        "fs",
        "runner",
        "module",
        "exports",
        "app",
        "route",
        "get",
        "req",
        "res",
        "next",
        "console",
        "log",
        "readFile",
        "__dirname",
        "err",
        "data",
        "send",
        "toString",
        "type",
        "process",
        "env",
        "NODE_ENV",
        "json",
        "status",
        "report",
        "testFilter",
        "query",
        "n",
        "on",
        "nextTick",
        "hs",
        "Object",
        "keys",
        "_headers",
        "filter",
        "h",
        "match",
        "hObj",
        "forEach",
        "headers",
        "tests",
        "out",
        "t",
        "context",
        "title",
        "undefined"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/new_name/Desktop/sudoku solver/routes/",
      "sourcesContent": [
        "/*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*       DO NOT EDIT THIS FILE\n*       For FCC testing purposes!\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*/\n\n'use strict';\n\nconst cors = require('cors');\nconst fs = require('fs');\nconst runner = require('../test-runner');\n\nmodule.exports = function (app) {\n\n  app.route('/_api/server.js')\n    .get(function(req, res, next) {\n      console.log('requested');\n      fs.readFile(__dirname + '/server.js', function(err, data) {\n        if(err) return next(err);\n        res.send(data.toString());\n      });\n    });\n  app.route('/_api/routes/api.js')\n    .get(function(req, res, next) {\n      console.log('requested');\n      fs.readFile(__dirname + '/routes/api.js', function(err, data) {\n        if(err) return next(err);\n        res.type('txt').send(data.toString());\n      });\n    });\n  app.route('/_api/controllers/convertHandler.js')\n    .get(function(req, res, next) {\n      console.log('requested');\n      fs.readFile(__dirname + '/controllers/convertHandler.js', function(err, data) {\n        if(err) return next(err);\n        res.type('txt').send(data.toString());\n      });\n    });\n\n  app.get('/_api/get-tests', cors(), function(req, res, next){\n    console.log('requested');\n    if(process.env.NODE_ENV === 'test') return next();\n    res.json({status: 'unavailable'});\n  },\n  function(req, res, next){\n    if(!runner.report) return next();\n    res.json(testFilter(runner.report, req.query.type, req.query.n));\n  },\n  function(req, res){\n    runner.on('done', function(report){\n      process.nextTick(() =>  res.json(testFilter(runner.report, req.query.type, req.query.n)));\n    });\n  });\n  app.get('/_api/app-info', function(req, res) {\n    let hs = Object.keys(res._headers)\n      .filter(h => !h.match(/^access-control-\\w+/));\n    let hObj = {};\n    hs.forEach(h => {hObj[h] = res._headers[h]});\n    delete res._headers['strict-transport-security'];\n    res.json({headers: hObj});\n  });\n  \n};\n\nfunction testFilter(tests, type, n) {\n  let out;\n  switch (type) {\n    case 'unit' :\n      out = tests.filter(t => t.context.match('Unit Tests'));\n      break;\n    case 'functional':\n      out = tests.filter(t => t.context.match('Functional Tests') && !t.title.match('#example'));\n      break;\n    default:\n      out = tests;\n  }\n  if(n !== undefined) {\n    return out[n] || out;\n  }\n  return out;\n}"
      ]
    },
    "sourceType": "module",
    "mtime": 1704993982278
  },
  "{\"sourceRoot\":\"/Users/new_name/Desktop/sudoku solver/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/new_name/Desktop/sudoku solver\",\"filename\":\"/Users/new_name/Desktop/sudoku solver/test-runner.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"/Users/new_name/Desktop/sudoku solver\",\"plugins\":[],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/new_name/Desktop/sudoku solver/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/new_name/Desktop/sudoku solver",
      "filename": "/Users/new_name/Desktop/sudoku solver/test-runner.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "/Users/new_name/Desktop/sudoku solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/new_name/Desktop/sudoku solver/test-runner.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/new_name/Desktop/sudoku solver/test-runner.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/new_name/Desktop/sudoku solver/",
        "sourceFileName": "test-runner.js"
      }
    },
    "ast": null,
    "code": "/*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*       DO NOT EDIT THIS FILE\n*       For FCC testing purposes!\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*/\nconst analyser = require('./assertion-analyser');\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst Mocha = require('mocha'),\n      fs = require('fs'),\n      path = require('path');\n\nrequire(\"@babel/register\");\n\nconst mocha = new Mocha({\n  timeout: 5000\n});\nconst testDir = './tests'; // Add each .js file to the mocha instance\n\nfs.readdirSync(testDir).filter(function (file) {\n  // Only keep the .js files\n  return file.substr(-3) === '.js';\n}).forEach(function (file) {\n  mocha.addFile(path.join(testDir, file));\n});\nlet emitter = new EventEmitter();\n\nemitter.run = function () {\n  let tests = [];\n  let context = \"\";\n  let separator = ' -> '; // Run the tests.\n\n  try {\n    let runner = mocha.ui('tdd').run().on('test end', function (test) {\n      // remove comments\n      let body = test.body.replace(/\\/\\/.*\\n|\\/\\*.*\\*\\//g, ''); // collapse spaces\n\n      body = body.replace(/\\s+/g, ' ');\n      let obj = {\n        title: test.title,\n        context: context.slice(0, -separator.length),\n        state: test.state,\n        // body: body,\n        assertions: analyser(body)\n      };\n      tests.push(obj);\n    }).on('end', function () {\n      emitter.report = tests;\n      emitter.emit('done', tests);\n    }).on('suite', function (s) {\n      context += s.title + separator;\n    }).on('suite end', function (s) {\n      context = context.slice(0, -(s.title.length + separator.length));\n    });\n  } catch (e) {\n    throw e;\n  }\n};\n\nmodule.exports = emitter;\n/*\n * Mocha.runner Events:\n * can be used to build a better custom report\n *\n *   - `start`  execution started\n *   - `end`  execution complete\n *   - `suite`  (suite) test suite execution started\n *   - `suite end`  (suite) all tests (and sub-suites) have finished\n *   - `test`  (test) test execution started\n *   - `test end`  (test) test completed\n *   - `hook`  (hook) hook execution started\n *   - `hook end`  (hook) hook complete\n *   - `pass`  (test) test passed\n *   - `fail`  (test, err) test failed\n *   - `pending`  (test) test pending\n */\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QtcnVubmVyLmpzIl0sIm5hbWVzIjpbImFuYWx5c2VyIiwicmVxdWlyZSIsIkV2ZW50RW1pdHRlciIsIk1vY2hhIiwiZnMiLCJwYXRoIiwibW9jaGEiLCJ0aW1lb3V0IiwidGVzdERpciIsInJlYWRkaXJTeW5jIiwiZmlsdGVyIiwiZmlsZSIsInN1YnN0ciIsImZvckVhY2giLCJhZGRGaWxlIiwiam9pbiIsImVtaXR0ZXIiLCJydW4iLCJ0ZXN0cyIsImNvbnRleHQiLCJzZXBhcmF0b3IiLCJydW5uZXIiLCJ1aSIsIm9uIiwidGVzdCIsImJvZHkiLCJyZXBsYWNlIiwib2JqIiwidGl0bGUiLCJzbGljZSIsImxlbmd0aCIsInN0YXRlIiwiYXNzZXJ0aW9ucyIsInB1c2giLCJyZXBvcnQiLCJlbWl0IiwicyIsImUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEyQkEsTUFBTUEsUUFBUSxHQUFHQyxPQUFPLENBQUMsc0JBQUQsQ0FBeEI7O0FBQ0EsTUFBTUMsWUFBWSxHQUFHRCxPQUFPLENBQUMsUUFBRCxDQUFQLENBQWtCQyxZQUF2Qzs7QUFFQSxNQUFNQyxLQUFLLEdBQUdGLE9BQU8sQ0FBQyxPQUFELENBQXJCO0FBQUEsTUFDSUcsRUFBRSxHQUFHSCxPQUFPLENBQUMsSUFBRCxDQURoQjtBQUFBLE1BRUlJLElBQUksR0FBR0osT0FBTyxDQUFDLE1BQUQsQ0FGbEI7O0FBR0lBLE9BQU8sQ0FBQyxpQkFBRCxDQUFQOztBQUVKLE1BQU1LLEtBQUssR0FBRyxJQUFJSCxLQUFKLENBQVU7QUFBRUksRUFBQUEsT0FBTyxFQUFFO0FBQVgsQ0FBVixDQUFkO0FBQ0EsTUFBTUMsT0FBTyxHQUFHLFNBQWhCLEMsQ0FHQTs7QUFDQUosRUFBRSxDQUFDSyxXQUFILENBQWVELE9BQWYsRUFBd0JFLE1BQXhCLENBQStCLFVBQVNDLElBQVQsRUFBYztBQUN6QztBQUNBLFNBQU9BLElBQUksQ0FBQ0MsTUFBTCxDQUFZLENBQUMsQ0FBYixNQUFvQixLQUEzQjtBQUVILENBSkQsRUFJR0MsT0FKSCxDQUlXLFVBQVNGLElBQVQsRUFBYztBQUNyQkwsRUFBQUEsS0FBSyxDQUFDUSxPQUFOLENBQ0lULElBQUksQ0FBQ1UsSUFBTCxDQUFVUCxPQUFWLEVBQW1CRyxJQUFuQixDQURKO0FBR0gsQ0FSRDtBQVVBLElBQUlLLE9BQU8sR0FBRyxJQUFJZCxZQUFKLEVBQWQ7O0FBQ0FjLE9BQU8sQ0FBQ0MsR0FBUixHQUFjLFlBQVc7QUFFdkIsTUFBSUMsS0FBSyxHQUFHLEVBQVo7QUFDQSxNQUFJQyxPQUFPLEdBQUcsRUFBZDtBQUNBLE1BQUlDLFNBQVMsR0FBRyxNQUFoQixDQUp1QixDQUt2Qjs7QUFDQSxNQUFJO0FBQ0osUUFBSUMsTUFBTSxHQUFHZixLQUFLLENBQUNnQixFQUFOLENBQVMsS0FBVCxFQUFnQkwsR0FBaEIsR0FDVk0sRUFEVSxDQUNQLFVBRE8sRUFDSyxVQUFTQyxJQUFULEVBQWU7QUFDM0I7QUFDQSxVQUFJQyxJQUFJLEdBQUdELElBQUksQ0FBQ0MsSUFBTCxDQUFVQyxPQUFWLENBQWtCLHNCQUFsQixFQUEwQyxFQUExQyxDQUFYLENBRjJCLENBRzNCOztBQUNBRCxNQUFBQSxJQUFJLEdBQUdBLElBQUksQ0FBQ0MsT0FBTCxDQUFhLE1BQWIsRUFBb0IsR0FBcEIsQ0FBUDtBQUNBLFVBQUlDLEdBQUcsR0FBRztBQUNSQyxRQUFBQSxLQUFLLEVBQUVKLElBQUksQ0FBQ0ksS0FESjtBQUVSVCxRQUFBQSxPQUFPLEVBQUVBLE9BQU8sQ0FBQ1UsS0FBUixDQUFjLENBQWQsRUFBaUIsQ0FBQ1QsU0FBUyxDQUFDVSxNQUE1QixDQUZEO0FBR1JDLFFBQUFBLEtBQUssRUFBRVAsSUFBSSxDQUFDTyxLQUhKO0FBSVI7QUFDQUMsUUFBQUEsVUFBVSxFQUFFaEMsUUFBUSxDQUFDeUIsSUFBRDtBQUxaLE9BQVY7QUFPQVAsTUFBQUEsS0FBSyxDQUFDZSxJQUFOLENBQVdOLEdBQVg7QUFDSCxLQWRVLEVBZVZKLEVBZlUsQ0FlUCxLQWZPLEVBZUEsWUFBVztBQUNsQlAsTUFBQUEsT0FBTyxDQUFDa0IsTUFBUixHQUFpQmhCLEtBQWpCO0FBQ0FGLE1BQUFBLE9BQU8sQ0FBQ21CLElBQVIsQ0FBYSxNQUFiLEVBQXFCakIsS0FBckI7QUFDSCxLQWxCVSxFQW1CVkssRUFuQlUsQ0FtQlAsT0FuQk8sRUFtQkUsVUFBU2EsQ0FBVCxFQUFZO0FBQ3ZCakIsTUFBQUEsT0FBTyxJQUFLaUIsQ0FBQyxDQUFDUixLQUFGLEdBQVVSLFNBQXRCO0FBRUQsS0F0QlUsRUF1QlZHLEVBdkJVLENBdUJQLFdBdkJPLEVBdUJNLFVBQVNhLENBQVQsRUFBWTtBQUMzQmpCLE1BQUFBLE9BQU8sR0FBR0EsT0FBTyxDQUFDVSxLQUFSLENBQWMsQ0FBZCxFQUFpQixFQUFFTyxDQUFDLENBQUNSLEtBQUYsQ0FBUUUsTUFBUixHQUFpQlYsU0FBUyxDQUFDVSxNQUE3QixDQUFqQixDQUFWO0FBQ0QsS0F6QlUsQ0FBYjtBQTBCQyxHQTNCRCxDQTJCRSxPQUFNTyxDQUFOLEVBQVM7QUFDVCxVQUFNQSxDQUFOO0FBQ0Q7QUFDRixDQXBDRDs7QUFzQ0FDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnZCLE9BQWpCO0FBRUEiLCJzb3VyY2VSb290IjoiL1VzZXJzL25ld19uYW1lL0Rlc2t0b3Avc3Vkb2t1IHNvbHZlci8iLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKiAgICAgICBETyBOT1QgRURJVCBUSElTIEZJTEVcbiogICAgICAgRm9yIEZDQyB0ZXN0aW5nIHB1cnBvc2VzIVxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKi9cblxuY29uc3QgYW5hbHlzZXIgPSByZXF1aXJlKCcuL2Fzc2VydGlvbi1hbmFseXNlcicpO1xuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuXG5jb25zdCBNb2NoYSA9IHJlcXVpcmUoJ21vY2hhJyksXG4gICAgZnMgPSByZXF1aXJlKCdmcycpLFxuICAgIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG4gICAgcmVxdWlyZShcIkBiYWJlbC9yZWdpc3RlclwiKTtcblxuY29uc3QgbW9jaGEgPSBuZXcgTW9jaGEoeyB0aW1lb3V0OiA1MDAwIH0pO1xuY29uc3QgdGVzdERpciA9ICcuL3Rlc3RzJ1xuXG5cbi8vIEFkZCBlYWNoIC5qcyBmaWxlIHRvIHRoZSBtb2NoYSBpbnN0YW5jZVxuZnMucmVhZGRpclN5bmModGVzdERpcikuZmlsdGVyKGZ1bmN0aW9uKGZpbGUpe1xuICAgIC8vIE9ubHkga2VlcCB0aGUgLmpzIGZpbGVzXG4gICAgcmV0dXJuIGZpbGUuc3Vic3RyKC0zKSA9PT0gJy5qcyc7XG5cbn0pLmZvckVhY2goZnVuY3Rpb24oZmlsZSl7XG4gICAgbW9jaGEuYWRkRmlsZShcbiAgICAgICAgcGF0aC5qb2luKHRlc3REaXIsIGZpbGUpXG4gICAgKTtcbn0pO1xuXG5sZXQgZW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbmVtaXR0ZXIucnVuID0gZnVuY3Rpb24oKSB7XG5cbiAgbGV0IHRlc3RzID0gW107XG4gIGxldCBjb250ZXh0ID0gXCJcIjtcbiAgbGV0IHNlcGFyYXRvciA9ICcgLT4gJztcbiAgLy8gUnVuIHRoZSB0ZXN0cy5cbiAgdHJ5IHtcbiAgbGV0IHJ1bm5lciA9IG1vY2hhLnVpKCd0ZGQnKS5ydW4oKVxuICAgIC5vbigndGVzdCBlbmQnLCBmdW5jdGlvbih0ZXN0KSB7XG4gICAgICAgIC8vIHJlbW92ZSBjb21tZW50c1xuICAgICAgICBsZXQgYm9keSA9IHRlc3QuYm9keS5yZXBsYWNlKC9cXC9cXC8uKlxcbnxcXC9cXCouKlxcKlxcLy9nLCAnJyk7XG4gICAgICAgIC8vIGNvbGxhcHNlIHNwYWNlc1xuICAgICAgICBib2R5ID0gYm9keS5yZXBsYWNlKC9cXHMrL2csJyAnKTtcbiAgICAgICAgbGV0IG9iaiA9IHtcbiAgICAgICAgICB0aXRsZTogdGVzdC50aXRsZSxcbiAgICAgICAgICBjb250ZXh0OiBjb250ZXh0LnNsaWNlKDAsIC1zZXBhcmF0b3IubGVuZ3RoKSxcbiAgICAgICAgICBzdGF0ZTogdGVzdC5zdGF0ZSxcbiAgICAgICAgICAvLyBib2R5OiBib2R5LFxuICAgICAgICAgIGFzc2VydGlvbnM6IGFuYWx5c2VyKGJvZHkpXG4gICAgICAgIH07XG4gICAgICAgIHRlc3RzLnB1c2gob2JqKTtcbiAgICB9KVxuICAgIC5vbignZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGVtaXR0ZXIucmVwb3J0ID0gdGVzdHM7XG4gICAgICAgIGVtaXR0ZXIuZW1pdCgnZG9uZScsIHRlc3RzKVxuICAgIH0pXG4gICAgLm9uKCdzdWl0ZScsIGZ1bmN0aW9uKHMpIHtcbiAgICAgIGNvbnRleHQgKz0gKHMudGl0bGUgKyBzZXBhcmF0b3IpO1xuXG4gICAgfSlcbiAgICAub24oJ3N1aXRlIGVuZCcsIGZ1bmN0aW9uKHMpIHtcbiAgICAgIGNvbnRleHQgPSBjb250ZXh0LnNsaWNlKDAsIC0ocy50aXRsZS5sZW5ndGggKyBzZXBhcmF0b3IubGVuZ3RoKSlcbiAgICB9KVxuICB9IGNhdGNoKGUpIHtcbiAgICB0aHJvdyhlKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbWl0dGVyO1xuXG4vKlxuICogTW9jaGEucnVubmVyIEV2ZW50czpcbiAqIGNhbiBiZSB1c2VkIHRvIGJ1aWxkIGEgYmV0dGVyIGN1c3RvbSByZXBvcnRcbiAqXG4gKiAgIC0gYHN0YXJ0YCAgZXhlY3V0aW9uIHN0YXJ0ZWRcbiAqICAgLSBgZW5kYCAgZXhlY3V0aW9uIGNvbXBsZXRlXG4gKiAgIC0gYHN1aXRlYCAgKHN1aXRlKSB0ZXN0IHN1aXRlIGV4ZWN1dGlvbiBzdGFydGVkXG4gKiAgIC0gYHN1aXRlIGVuZGAgIChzdWl0ZSkgYWxsIHRlc3RzIChhbmQgc3ViLXN1aXRlcykgaGF2ZSBmaW5pc2hlZFxuICogICAtIGB0ZXN0YCAgKHRlc3QpIHRlc3QgZXhlY3V0aW9uIHN0YXJ0ZWRcbiAqICAgLSBgdGVzdCBlbmRgICAodGVzdCkgdGVzdCBjb21wbGV0ZWRcbiAqICAgLSBgaG9va2AgIChob29rKSBob29rIGV4ZWN1dGlvbiBzdGFydGVkXG4gKiAgIC0gYGhvb2sgZW5kYCAgKGhvb2spIGhvb2sgY29tcGxldGVcbiAqICAgLSBgcGFzc2AgICh0ZXN0KSB0ZXN0IHBhc3NlZFxuICogICAtIGBmYWlsYCAgKHRlc3QsIGVycikgdGVzdCBmYWlsZWRcbiAqICAgLSBgcGVuZGluZ2AgICh0ZXN0KSB0ZXN0IHBlbmRpbmdcbiAqLyJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "test-runner.js"
      ],
      "names": [
        "analyser",
        "require",
        "EventEmitter",
        "Mocha",
        "fs",
        "path",
        "mocha",
        "timeout",
        "testDir",
        "readdirSync",
        "filter",
        "file",
        "substr",
        "forEach",
        "addFile",
        "join",
        "emitter",
        "run",
        "tests",
        "context",
        "separator",
        "runner",
        "ui",
        "on",
        "test",
        "body",
        "replace",
        "obj",
        "title",
        "slice",
        "length",
        "state",
        "assertions",
        "push",
        "report",
        "emit",
        "s",
        "e",
        "module",
        "exports"
      ],
      "mappings": "AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,sBAAD,CAAxB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,QAAD,CAAP,CAAkBC,YAAvC;;AAEA,MAAMC,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;AAAA,MACIG,EAAE,GAAGH,OAAO,CAAC,IAAD,CADhB;AAAA,MAEII,IAAI,GAAGJ,OAAO,CAAC,MAAD,CAFlB;;AAGIA,OAAO,CAAC,iBAAD,CAAP;;AAEJ,MAAMK,KAAK,GAAG,IAAIH,KAAJ,CAAU;AAAEI,EAAAA,OAAO,EAAE;AAAX,CAAV,CAAd;AACA,MAAMC,OAAO,GAAG,SAAhB,C,CAGA;;AACAJ,EAAE,CAACK,WAAH,CAAeD,OAAf,EAAwBE,MAAxB,CAA+B,UAASC,IAAT,EAAc;AACzC;AACA,SAAOA,IAAI,CAACC,MAAL,CAAY,CAAC,CAAb,MAAoB,KAA3B;AAEH,CAJD,EAIGC,OAJH,CAIW,UAASF,IAAT,EAAc;AACrBL,EAAAA,KAAK,CAACQ,OAAN,CACIT,IAAI,CAACU,IAAL,CAAUP,OAAV,EAAmBG,IAAnB,CADJ;AAGH,CARD;AAUA,IAAIK,OAAO,GAAG,IAAId,YAAJ,EAAd;;AACAc,OAAO,CAACC,GAAR,GAAc,YAAW;AAEvB,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,SAAS,GAAG,MAAhB,CAJuB,CAKvB;;AACA,MAAI;AACJ,QAAIC,MAAM,GAAGf,KAAK,CAACgB,EAAN,CAAS,KAAT,EAAgBL,GAAhB,GACVM,EADU,CACP,UADO,EACK,UAASC,IAAT,EAAe;AAC3B;AACA,UAAIC,IAAI,GAAGD,IAAI,CAACC,IAAL,CAAUC,OAAV,CAAkB,sBAAlB,EAA0C,EAA1C,CAAX,CAF2B,CAG3B;;AACAD,MAAAA,IAAI,GAAGA,IAAI,CAACC,OAAL,CAAa,MAAb,EAAoB,GAApB,CAAP;AACA,UAAIC,GAAG,GAAG;AACRC,QAAAA,KAAK,EAAEJ,IAAI,CAACI,KADJ;AAERT,QAAAA,OAAO,EAAEA,OAAO,CAACU,KAAR,CAAc,CAAd,EAAiB,CAACT,SAAS,CAACU,MAA5B,CAFD;AAGRC,QAAAA,KAAK,EAAEP,IAAI,CAACO,KAHJ;AAIR;AACAC,QAAAA,UAAU,EAAEhC,QAAQ,CAACyB,IAAD;AALZ,OAAV;AAOAP,MAAAA,KAAK,CAACe,IAAN,CAAWN,GAAX;AACH,KAdU,EAeVJ,EAfU,CAeP,KAfO,EAeA,YAAW;AAClBP,MAAAA,OAAO,CAACkB,MAAR,GAAiBhB,KAAjB;AACAF,MAAAA,OAAO,CAACmB,IAAR,CAAa,MAAb,EAAqBjB,KAArB;AACH,KAlBU,EAmBVK,EAnBU,CAmBP,OAnBO,EAmBE,UAASa,CAAT,EAAY;AACvBjB,MAAAA,OAAO,IAAKiB,CAAC,CAACR,KAAF,GAAUR,SAAtB;AAED,KAtBU,EAuBVG,EAvBU,CAuBP,WAvBO,EAuBM,UAASa,CAAT,EAAY;AAC3BjB,MAAAA,OAAO,GAAGA,OAAO,CAACU,KAAR,CAAc,CAAd,EAAiB,EAAEO,CAAC,CAACR,KAAF,CAAQE,MAAR,GAAiBV,SAAS,CAACU,MAA7B,CAAjB,CAAV;AACD,KAzBU,CAAb;AA0BC,GA3BD,CA2BE,OAAMO,CAAN,EAAS;AACT,UAAMA,CAAN;AACD;AACF,CApCD;;AAsCAC,MAAM,CAACC,OAAP,GAAiBvB,OAAjB;AAEA",
      "sourceRoot": "/Users/new_name/Desktop/sudoku solver/",
      "sourcesContent": [
        "/*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*       DO NOT EDIT THIS FILE\n*       For FCC testing purposes!\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*/\n\nconst analyser = require('./assertion-analyser');\nconst EventEmitter = require('events').EventEmitter;\n\nconst Mocha = require('mocha'),\n    fs = require('fs'),\n    path = require('path');\n    require(\"@babel/register\");\n\nconst mocha = new Mocha({ timeout: 5000 });\nconst testDir = './tests'\n\n\n// Add each .js file to the mocha instance\nfs.readdirSync(testDir).filter(function(file){\n    // Only keep the .js files\n    return file.substr(-3) === '.js';\n\n}).forEach(function(file){\n    mocha.addFile(\n        path.join(testDir, file)\n    );\n});\n\nlet emitter = new EventEmitter();\nemitter.run = function() {\n\n  let tests = [];\n  let context = \"\";\n  let separator = ' -> ';\n  // Run the tests.\n  try {\n  let runner = mocha.ui('tdd').run()\n    .on('test end', function(test) {\n        // remove comments\n        let body = test.body.replace(/\\/\\/.*\\n|\\/\\*.*\\*\\//g, '');\n        // collapse spaces\n        body = body.replace(/\\s+/g,' ');\n        let obj = {\n          title: test.title,\n          context: context.slice(0, -separator.length),\n          state: test.state,\n          // body: body,\n          assertions: analyser(body)\n        };\n        tests.push(obj);\n    })\n    .on('end', function() {\n        emitter.report = tests;\n        emitter.emit('done', tests)\n    })\n    .on('suite', function(s) {\n      context += (s.title + separator);\n\n    })\n    .on('suite end', function(s) {\n      context = context.slice(0, -(s.title.length + separator.length))\n    })\n  } catch(e) {\n    throw(e);\n  }\n};\n\nmodule.exports = emitter;\n\n/*\n * Mocha.runner Events:\n * can be used to build a better custom report\n *\n *   - `start`  execution started\n *   - `end`  execution complete\n *   - `suite`  (suite) test suite execution started\n *   - `suite end`  (suite) all tests (and sub-suites) have finished\n *   - `test`  (test) test execution started\n *   - `test end`  (test) test completed\n *   - `hook`  (hook) hook execution started\n *   - `hook end`  (hook) hook complete\n *   - `pass`  (test) test passed\n *   - `fail`  (test, err) test failed\n *   - `pending`  (test) test pending\n */"
      ]
    },
    "sourceType": "module",
    "mtime": 1704993982279
  },
  "{\"sourceRoot\":\"/Users/new_name/Desktop/sudoku solver/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/new_name/Desktop/sudoku solver\",\"filename\":\"/Users/new_name/Desktop/sudoku solver/assertion-analyser.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"/Users/new_name/Desktop/sudoku solver\",\"plugins\":[],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/new_name/Desktop/sudoku solver/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/new_name/Desktop/sudoku solver",
      "filename": "/Users/new_name/Desktop/sudoku solver/assertion-analyser.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "/Users/new_name/Desktop/sudoku solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/new_name/Desktop/sudoku solver/assertion-analyser.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/new_name/Desktop/sudoku solver/assertion-analyser.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/new_name/Desktop/sudoku solver/",
        "sourceFileName": "assertion-analyser.js"
      }
    },
    "ast": null,
    "code": "/*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*       DO NOT EDIT THIS FILE\n*       For FCC testing purposes!\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*/\nfunction objParser(str, init) {\n  // finds objects, arrays, strings, and function arguments\n  // between parens, because they may contain ','\n  let openSym = ['[', '{', '\"', \"'\", '('];\n  let closeSym = [']', '}', '\"', \"'\", ')'];\n  let type;\n  let i;\n\n  for (i = init || 0; i < str.length; i++) {\n    type = openSym.indexOf(str[i]);\n    if (type !== -1) break;\n  }\n\n  if (type === -1) return null;\n  let open = openSym[type];\n  let close = closeSym[type];\n  let count = 1;\n  let k;\n\n  for (k = i + 1; k < str.length; k++) {\n    if (open === '\"' || open === \"'\") {\n      if (str[k] === close) count--;\n      if (str[k] === '\\\\') k++;\n    } else {\n      if (str[k] === open) count++;\n      if (str[k] === close) count--;\n    }\n\n    if (count === 0) break;\n  }\n\n  if (count !== 0) return null;\n  let obj = str.slice(i, k + 1);\n  return {\n    start: i,\n    end: k,\n    obj: obj\n  };\n}\n\nfunction replacer(str) {\n  // replace objects with a symbol ( __#n)\n  let obj;\n  let cnt = 0;\n  let data = [];\n\n  while (obj = objParser(str)) {\n    data[cnt] = obj.obj;\n    str = str.substring(0, obj.start) + '__#' + cnt++ + str.substring(obj.end + 1);\n  }\n\n  return {\n    str: str,\n    dictionary: data\n  };\n}\n\nfunction splitter(str) {\n  // split on commas, then restore the objects\n  let strObj = replacer(str);\n  let args = strObj.str.split(',');\n  args = args.map(function (a) {\n    let m = a.match(/__#(\\d+)/);\n\n    while (m) {\n      a = a.replace(/__#(\\d+)/, strObj.dictionary[m[1]]);\n      m = a.match(/__#(\\d+)/);\n    }\n\n    return a.trim();\n  });\n  return args;\n}\n\nfunction assertionAnalyser(body) {\n  // already filtered in the test runner\n  // // remove comments\n  // body = body.replace(/\\/\\/.*\\n|\\/\\*.*\\*\\//g, '');\n  // // get test function body\n  // body = body.match(/\\{\\s*([\\s\\S]*)\\}\\s*$/)[1];\n  if (!body) return \"invalid assertion\"; // replace assertions bodies, so that they cannot\n  // contain the word 'assertion'\n\n  let cleanedBody = body.match(/(?:browser\\s*\\.\\s*)?assert\\s*\\.\\s*\\w*\\([\\s\\S]*\\)/);\n\n  if (cleanedBody && Array.isArray(cleanedBody)) {\n    body = cleanedBody[0];\n  } else {\n    // No assertions present\n    return [];\n  }\n\n  let s = replacer(body); // split on 'assertion'\n\n  let splittedAssertions = s.str.split('assert');\n  let assertions = splittedAssertions.slice(1); // match the METHODS\n\n  let assertionBodies = [];\n  let methods = assertions.map(function (a, i) {\n    let m = a.match(/^\\s*\\.\\s*(\\w+)__#(\\d+)/);\n    assertionBodies.push(parseInt(m[2]));\n    let pre = splittedAssertions[i].match(/browser\\s*\\.\\s*/) ? 'browser.' : '';\n    return pre + m[1];\n  });\n  if (methods.some(function (m) {\n    return !m;\n  })) return \"invalid assertion\"; // remove parens from the assertions bodies\n\n  let bodies = assertionBodies.map(function (b) {\n    return s.dictionary[b].slice(1, -1).trim();\n  });\n  assertions = methods.map(function (m, i) {\n    return {\n      method: m,\n      args: splitter(bodies[i]) //replace objects, split on ',' ,then restore objects\n\n    };\n  });\n  return assertions;\n}\n\nmodule.exports = assertionAnalyser;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "assertion-analyser.js"
      ],
      "names": [
        "objParser",
        "str",
        "init",
        "openSym",
        "closeSym",
        "type",
        "i",
        "length",
        "indexOf",
        "open",
        "close",
        "count",
        "k",
        "obj",
        "slice",
        "start",
        "end",
        "replacer",
        "cnt",
        "data",
        "substring",
        "dictionary",
        "splitter",
        "strObj",
        "args",
        "split",
        "map",
        "a",
        "m",
        "match",
        "replace",
        "trim",
        "assertionAnalyser",
        "body",
        "cleanedBody",
        "Array",
        "isArray",
        "s",
        "splittedAssertions",
        "assertions",
        "assertionBodies",
        "methods",
        "push",
        "parseInt",
        "pre",
        "some",
        "bodies",
        "b",
        "method",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/new_name/Desktop/sudoku solver/",
      "sourcesContent": [
        "/*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*       DO NOT EDIT THIS FILE\n*       For FCC testing purposes!\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*/\n\nfunction objParser(str, init) {\n  // finds objects, arrays, strings, and function arguments\n  // between parens, because they may contain ','\n  let openSym = ['[', '{', '\"', \"'\", '('];\n  let closeSym = [']', '}', '\"', \"'\", ')'];\n  let type;\n  let i;\n  for(i = (init || 0); i < str.length; i++ ) {\n    type = openSym.indexOf(str[i]);\n    if( type !== -1)  break;\n  }\n  if (type === -1) return null;\n  let open = openSym[type];\n  let close = closeSym[type];\n  let count = 1;\n  let k;\n  for(k = i+1; k < str.length; k++) {\n    if(open === '\"' || open === \"'\") {\n      if(str[k] === close) count--;\n      if(str[k] === '\\\\') k++;\n    } else {\n      if(str[k] === open) count++;\n      if(str[k] === close) count--;\n    }\n    if(count === 0) break;\n  }\n  if(count !== 0) return null;\n  let obj = str.slice(i, k+1);\n  return {\n    start : i,\n    end: k,\n    obj: obj\n  };\n}\n\nfunction replacer(str) {\n  // replace objects with a symbol ( __#n)\n  let obj;\n  let cnt = 0;\n  let data = [];\n  while(obj = objParser(str)) {\n    data[cnt] = obj.obj;\n    str = str.substring(0, obj.start) + '__#' + cnt++ + str.substring(obj.end+1)\n  }\n  return {\n    str : str,\n    dictionary : data\n  }\n}\n\nfunction splitter(str) {\n  // split on commas, then restore the objects\n  let strObj = replacer(str);\n  let args = strObj.str.split(',');\n  args = args.map(function(a){\n    let m = a.match(/__#(\\d+)/);\n    while (m) {\n      a = a.replace(/__#(\\d+)/, strObj.dictionary[m[1]]);\n      m = a.match(/__#(\\d+)/);\n    }\n    return a.trim();\n  })\n  return args;\n}\n\nfunction assertionAnalyser(body) {\n  \n  // already filtered in the test runner\n  // // remove comments\n  // body = body.replace(/\\/\\/.*\\n|\\/\\*.*\\*\\//g, '');\n  // // get test function body\n  // body = body.match(/\\{\\s*([\\s\\S]*)\\}\\s*$/)[1];\n  \n  if(!body) return \"invalid assertion\";\n  // replace assertions bodies, so that they cannot\n  // contain the word 'assertion'\n\n  let cleanedBody = body.match(/(?:browser\\s*\\.\\s*)?assert\\s*\\.\\s*\\w*\\([\\s\\S]*\\)/)\n  if(cleanedBody && Array.isArray(cleanedBody)) {\n    body = cleanedBody[0];\n  } else {\n    // No assertions present\n    return [];\n  }\n  let s = replacer(body);\n  // split on 'assertion'\n  let splittedAssertions = s.str.split('assert');\n  let assertions = splittedAssertions.slice(1);\n  // match the METHODS\n\n  let assertionBodies = [];\n  let methods = assertions.map(function(a, i){\n    let m = a.match(/^\\s*\\.\\s*(\\w+)__#(\\d+)/);\n    assertionBodies.push(parseInt(m[2]));\n    let pre = splittedAssertions[i].match(/browser\\s*\\.\\s*/) ? 'browser.' : '';\n    return pre + m[1];\n  });\n  if(methods.some(function(m){ return !m })) return \"invalid assertion\";\n  // remove parens from the assertions bodies\n  let bodies = assertionBodies.map(function(b){\n    return s.dictionary[b].slice(1,-1).trim();\n  });\n  assertions = methods.map(function(m, i) {\n    return {\n      method: m,\n      args: splitter(bodies[i]) //replace objects, split on ',' ,then restore objects\n    }\n  })\n  return assertions;\n}\n\nmodule.exports = assertionAnalyser;\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1704993982276
  },
  "{\"sourceRoot\":\"/Users/new_name/Desktop/sudoku solver/routes/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/new_name/Desktop/sudoku solver\",\"filename\":\"/Users/new_name/Desktop/sudoku solver/routes/api.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"/Users/new_name/Desktop/sudoku solver\",\"plugins\":[],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/new_name/Desktop/sudoku solver/routes/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/new_name/Desktop/sudoku solver",
      "filename": "/Users/new_name/Desktop/sudoku solver/routes/api.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "/Users/new_name/Desktop/sudoku solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/new_name/Desktop/sudoku solver/routes/api.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/new_name/Desktop/sudoku solver/routes/api.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/new_name/Desktop/sudoku solver/routes/",
        "sourceFileName": "api.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n\nmodule.exports = function (app) {\n  let solver = new SudokuSolver();\n  app.route('/api/check').post((req, res) => {\n    let puzzle = req.body.puzzle;\n    let coordinate = req.body.coordinate;\n    let stringValue = req.body.value;\n    let value = parseInt(req.body.value);\n\n    if (!puzzle || !coordinate || !stringValue) {\n      res.json({\n        error: 'Required field(s) missing'\n      });\n      return;\n    }\n\n    if (!/^[1-9]$/.test(value)) {\n      res.json({\n        error: \"Invalid value\"\n      });\n      return;\n    }\n\n    const coordinateMatch = coordinate.match(/([A-I])([1-9])/);\n\n    if (coordinate.length !== 2 || !coordinateMatch) {\n      res.json({\n        error: \"Invalid coordinate\"\n      });\n      return;\n    }\n\n    let columnLetterValue = coordinateMatch[1];\n    let horizontalValue = parseInt(coordinateMatch[2]);\n    let columnValue = columnLetterValue.charCodeAt(0) - 'A'.charCodeAt(0) + 1;\n\n    if (!solver.validate(puzzle)) {\n      res.json({\n        error: 'Invalid characters in puzzle'\n      });\n      return;\n    }\n\n    if (solver.validate(puzzle) === \"too many characters\") {\n      res.json({\n        error: 'Expected puzzle to be 81 characters long'\n      });\n      return;\n    }\n\n    let puzzleArray = solver.createTwoDimensionalArray(puzzle);\n    let checkHorizontalConflict = solver.checkRowPlacement(puzzleArray, horizontalValue - 1, columnValue - 1, value);\n    let checkVerticalConflict = solver.checkColPlacement(puzzleArray, horizontalValue - 1, columnValue - 1, value);\n    let checkRegionConflict = solver.checkRegionPlacement(puzzleArray, horizontalValue - 1, columnValue - 1, value);\n    let conflicts = [];\n\n    if (!checkHorizontalConflict) {\n      conflicts.push(\"row\");\n    }\n\n    if (!checkVerticalConflict) {\n      conflicts.push(\"column\");\n    }\n\n    if (!checkRegionConflict) {\n      conflicts.push('region');\n    }\n\n    if (conflicts.length > 0) {\n      res.json({\n        valid: false,\n        conflict: conflicts\n      });\n      return;\n    } else {\n      res.json({\n        valid: true\n      });\n      return;\n    }\n  });\n  app.route('/api/solve').post((req, res) => {\n    let puzzle = req.body.puzzle;\n\n    if (!puzzle) {\n      res.json({\n        error: 'Required field missing'\n      });\n      return;\n    }\n\n    if (!solver.validate(puzzle)) {\n      res.json({\n        error: 'Invalid characters in puzzle'\n      });\n      return;\n    }\n\n    if (solver.validate(puzzle) === \"too many characters\") {\n      res.json({\n        error: 'Expected puzzle to be 81 characters long'\n      });\n      return;\n    }\n\n    let puzzleArray = solver.createTwoDimensionalArray(puzzle);\n    let solution = solver.solve(puzzleArray);\n    console.log(solution);\n\n    if (!solution) {\n      res.json({\n        error: 'Puzzle cannot be solved'\n      });\n      return;\n    } // let puzzleArrayString = solution.map((row) => row.join('')).join('');\n\n\n    res.json({\n      solution: solution\n    });\n  });\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "api.js"
      ],
      "names": [
        "SudokuSolver",
        "require",
        "module",
        "exports",
        "app",
        "solver",
        "route",
        "post",
        "req",
        "res",
        "puzzle",
        "body",
        "coordinate",
        "stringValue",
        "value",
        "parseInt",
        "json",
        "error",
        "test",
        "coordinateMatch",
        "match",
        "length",
        "columnLetterValue",
        "horizontalValue",
        "columnValue",
        "charCodeAt",
        "validate",
        "puzzleArray",
        "createTwoDimensionalArray",
        "checkHorizontalConflict",
        "checkRowPlacement",
        "checkVerticalConflict",
        "checkColPlacement",
        "checkRegionConflict",
        "checkRegionPlacement",
        "conflicts",
        "push",
        "valid",
        "conflict",
        "solution",
        "solve",
        "console",
        "log"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/new_name/Desktop/sudoku solver/routes/",
      "sourcesContent": [
        "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n\nmodule.exports = function (app) {\n  \n  let solver = new SudokuSolver();\n\n  app.route('/api/check')\n    .post((req, res) => {\n      let puzzle = req.body.puzzle;\n      let coordinate = req.body.coordinate;\n      let stringValue = req.body.value;\n      let value = parseInt(req.body.value);\n\n      if (!puzzle || !coordinate || !stringValue) {\n        res.json({ error: 'Required field(s) missing' });\n        return;\n      }\n      \n      if (!/^[1-9]$/.test(value)) {\n        res.json({ error: \"Invalid value\" });\n        return;\n      }\n  \n      const  coordinateMatch = coordinate.match(/([A-I])([1-9])/);\n\n      if (coordinate.length !== 2 || !coordinateMatch) {\n        res.json({ error: \"Invalid coordinate\" });\n        return;\n      }\n\n      let columnLetterValue = coordinateMatch[1];\n      let horizontalValue = parseInt(coordinateMatch[2]);\n      let columnValue = columnLetterValue.charCodeAt(0) - 'A'.charCodeAt(0) + 1;\n\n      if (!solver.validate(puzzle)) {\n        res.json({ error: 'Invalid characters in puzzle' });\n        return;\n      }\n\n      if (solver.validate(puzzle) === \"too many characters\") {\n        res.json({ error: 'Expected puzzle to be 81 characters long' });\n        return;\n      }\n\n      let puzzleArray = solver.createTwoDimensionalArray(puzzle);\n\n      let checkHorizontalConflict = solver.checkRowPlacement(puzzleArray, horizontalValue - 1, columnValue - 1, value);\n      let checkVerticalConflict = solver.checkColPlacement(puzzleArray, horizontalValue - 1, columnValue - 1, value);\n      let checkRegionConflict = solver.checkRegionPlacement(puzzleArray, horizontalValue - 1, columnValue - 1, value);\n\n      let conflicts = [];\n\n      if (!checkHorizontalConflict) {\n        conflicts.push(\"row\");\n      }\n      if (!checkVerticalConflict) {\n        conflicts.push(\"column\");\n      }\n      if (!checkRegionConflict) {\n        conflicts.push('region');\n      }\n      \n      if (conflicts.length > 0) {\n        res.json({ valid: false, conflict: conflicts });\n        return;\n      } else {\n        res.json({ valid: true });\n        return;\n      }\n    });\n    \n  app.route('/api/solve')\n    .post((req, res) => {\n      let puzzle = req.body.puzzle;\n\n      if (!puzzle) {\n        res.json({ error: 'Required field missing' });\n        return;\n      }\n      if (!solver.validate(puzzle)) {\n        res.json({ error: 'Invalid characters in puzzle' });\n        return;\n      }\n      if (solver.validate(puzzle) === \"too many characters\") {\n        res.json({ error: 'Expected puzzle to be 81 characters long' });\n        return;\n      }\n\n      let puzzleArray = solver.createTwoDimensionalArray(puzzle);\n\n      let solution = solver.solve(puzzleArray);\n      console.log(solution);\n\n      if (!solution) {\n        res.json({ error: 'Puzzle cannot be solved' });\n        return;\n      }\n      // let puzzleArrayString = solution.map((row) => row.join('')).join('');\n\n      res.json({solution: solution});\n    });\n};\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1705097471501
  },
  "{\"sourceRoot\":\"/Users/new_name/Desktop/sudoku solver/routes/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/new_name/Desktop/sudoku solver\",\"filename\":\"/Users/new_name/Desktop/sudoku solver/routes/fcctesting.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/new_name/Desktop/sudoku solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/new_name/Desktop/sudoku solver/routes/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/new_name/Desktop/sudoku solver",
      "filename": "/Users/new_name/Desktop/sudoku solver/routes/fcctesting.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/new_name/Desktop/sudoku solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/new_name/Desktop/sudoku solver/routes/fcctesting.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/new_name/Desktop/sudoku solver/routes/fcctesting.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/new_name/Desktop/sudoku solver/routes/",
        "sourceFileName": "fcctesting.js"
      }
    },
    "ast": null,
    "code": "/*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*       DO NOT EDIT THIS FILE\n*       For FCC testing purposes!\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*/\n'use strict';\n\nconst cors = require('cors');\n\nconst fs = require('fs');\n\nconst runner = require('../test-runner');\n\nmodule.exports = function (app) {\n  app.route('/_api/server.js').get(function (req, res, next) {\n    console.log('requested');\n    fs.readFile(__dirname + '/server.js', function (err, data) {\n      if (err) return next(err);\n      res.send(data.toString());\n    });\n  });\n  app.route('/_api/routes/api.js').get(function (req, res, next) {\n    console.log('requested');\n    fs.readFile(__dirname + '/routes/api.js', function (err, data) {\n      if (err) return next(err);\n      res.type('txt').send(data.toString());\n    });\n  });\n  app.route('/_api/controllers/convertHandler.js').get(function (req, res, next) {\n    console.log('requested');\n    fs.readFile(__dirname + '/controllers/convertHandler.js', function (err, data) {\n      if (err) return next(err);\n      res.type('txt').send(data.toString());\n    });\n  });\n  app.get('/_api/get-tests', cors(), function (req, res, next) {\n    console.log('requested');\n    if (process.env.NODE_ENV === 'test') return next();\n    res.json({\n      status: 'unavailable'\n    });\n  }, function (req, res, next) {\n    if (!runner.report) return next();\n    res.json(testFilter(runner.report, req.query.type, req.query.n));\n  }, function (req, res) {\n    runner.on('done', function (report) {\n      process.nextTick(() => res.json(testFilter(runner.report, req.query.type, req.query.n)));\n    });\n  });\n  app.get('/_api/app-info', function (req, res) {\n    let hs = Object.keys(res._headers).filter(h => !h.match(/^access-control-\\w+/));\n    let hObj = {};\n    hs.forEach(h => {\n      hObj[h] = res._headers[h];\n    });\n    delete res._headers['strict-transport-security'];\n    res.json({\n      headers: hObj\n    });\n  });\n};\n\nfunction testFilter(tests, type, n) {\n  let out;\n\n  switch (type) {\n    case 'unit':\n      out = tests.filter(t => t.context.match('Unit Tests'));\n      break;\n\n    case 'functional':\n      out = tests.filter(t => t.context.match('Functional Tests') && !t.title.match('#example'));\n      break;\n\n    default:\n      out = tests;\n  }\n\n  if (n !== undefined) {\n    return out[n] || out;\n  }\n\n  return out;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "fcctesting.js"
      ],
      "names": [
        "cors",
        "require",
        "fs",
        "runner",
        "module",
        "exports",
        "app",
        "route",
        "get",
        "req",
        "res",
        "next",
        "console",
        "log",
        "readFile",
        "__dirname",
        "err",
        "data",
        "send",
        "toString",
        "type",
        "process",
        "env",
        "NODE_ENV",
        "json",
        "status",
        "report",
        "testFilter",
        "query",
        "n",
        "on",
        "nextTick",
        "hs",
        "Object",
        "keys",
        "_headers",
        "filter",
        "h",
        "match",
        "hObj",
        "forEach",
        "headers",
        "tests",
        "out",
        "t",
        "context",
        "title",
        "undefined"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/new_name/Desktop/sudoku solver/routes/",
      "sourcesContent": [
        "/*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*       DO NOT EDIT THIS FILE\n*       For FCC testing purposes!\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*/\n\n'use strict';\n\nconst cors = require('cors');\nconst fs = require('fs');\nconst runner = require('../test-runner');\n\nmodule.exports = function (app) {\n\n  app.route('/_api/server.js')\n    .get(function(req, res, next) {\n      console.log('requested');\n      fs.readFile(__dirname + '/server.js', function(err, data) {\n        if(err) return next(err);\n        res.send(data.toString());\n      });\n    });\n  app.route('/_api/routes/api.js')\n    .get(function(req, res, next) {\n      console.log('requested');\n      fs.readFile(__dirname + '/routes/api.js', function(err, data) {\n        if(err) return next(err);\n        res.type('txt').send(data.toString());\n      });\n    });\n  app.route('/_api/controllers/convertHandler.js')\n    .get(function(req, res, next) {\n      console.log('requested');\n      fs.readFile(__dirname + '/controllers/convertHandler.js', function(err, data) {\n        if(err) return next(err);\n        res.type('txt').send(data.toString());\n      });\n    });\n\n  app.get('/_api/get-tests', cors(), function(req, res, next){\n    console.log('requested');\n    if(process.env.NODE_ENV === 'test') return next();\n    res.json({status: 'unavailable'});\n  },\n  function(req, res, next){\n    if(!runner.report) return next();\n    res.json(testFilter(runner.report, req.query.type, req.query.n));\n  },\n  function(req, res){\n    runner.on('done', function(report){\n      process.nextTick(() =>  res.json(testFilter(runner.report, req.query.type, req.query.n)));\n    });\n  });\n  app.get('/_api/app-info', function(req, res) {\n    let hs = Object.keys(res._headers)\n      .filter(h => !h.match(/^access-control-\\w+/));\n    let hObj = {};\n    hs.forEach(h => {hObj[h] = res._headers[h]});\n    delete res._headers['strict-transport-security'];\n    res.json({headers: hObj});\n  });\n  \n};\n\nfunction testFilter(tests, type, n) {\n  let out;\n  switch (type) {\n    case 'unit' :\n      out = tests.filter(t => t.context.match('Unit Tests'));\n      break;\n    case 'functional':\n      out = tests.filter(t => t.context.match('Functional Tests') && !t.title.match('#example'));\n      break;\n    default:\n      out = tests;\n  }\n  if(n !== undefined) {\n    return out[n] || out;\n  }\n  return out;\n}"
      ]
    },
    "sourceType": "module",
    "mtime": 1704993982278
  },
  "{\"sourceRoot\":\"/Users/new_name/Desktop/sudoku solver/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/new_name/Desktop/sudoku solver\",\"filename\":\"/Users/new_name/Desktop/sudoku solver/test-runner.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/new_name/Desktop/sudoku solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/new_name/Desktop/sudoku solver/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/new_name/Desktop/sudoku solver",
      "filename": "/Users/new_name/Desktop/sudoku solver/test-runner.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/new_name/Desktop/sudoku solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/new_name/Desktop/sudoku solver/test-runner.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/new_name/Desktop/sudoku solver/test-runner.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/new_name/Desktop/sudoku solver/",
        "sourceFileName": "test-runner.js"
      }
    },
    "ast": null,
    "code": "/*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*       DO NOT EDIT THIS FILE\n*       For FCC testing purposes!\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*/\nconst analyser = require('./assertion-analyser');\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst Mocha = require('mocha'),\n      fs = require('fs'),\n      path = require('path');\n\nrequire(\"@babel/register\");\n\nconst mocha = new Mocha({\n  timeout: 5000\n});\nconst testDir = './tests'; // Add each .js file to the mocha instance\n\nfs.readdirSync(testDir).filter(function (file) {\n  // Only keep the .js files\n  return file.substr(-3) === '.js';\n}).forEach(function (file) {\n  mocha.addFile(path.join(testDir, file));\n});\nlet emitter = new EventEmitter();\n\nemitter.run = function () {\n  let tests = [];\n  let context = \"\";\n  let separator = ' -> '; // Run the tests.\n\n  try {\n    let runner = mocha.ui('tdd').run().on('test end', function (test) {\n      // remove comments\n      let body = test.body.replace(/\\/\\/.*\\n|\\/\\*.*\\*\\//g, ''); // collapse spaces\n\n      body = body.replace(/\\s+/g, ' ');\n      let obj = {\n        title: test.title,\n        context: context.slice(0, -separator.length),\n        state: test.state,\n        // body: body,\n        assertions: analyser(body)\n      };\n      tests.push(obj);\n    }).on('end', function () {\n      emitter.report = tests;\n      emitter.emit('done', tests);\n    }).on('suite', function (s) {\n      context += s.title + separator;\n    }).on('suite end', function (s) {\n      context = context.slice(0, -(s.title.length + separator.length));\n    });\n  } catch (e) {\n    throw e;\n  }\n};\n\nmodule.exports = emitter;\n/*\n * Mocha.runner Events:\n * can be used to build a better custom report\n *\n *   - `start`  execution started\n *   - `end`  execution complete\n *   - `suite`  (suite) test suite execution started\n *   - `suite end`  (suite) all tests (and sub-suites) have finished\n *   - `test`  (test) test execution started\n *   - `test end`  (test) test completed\n *   - `hook`  (hook) hook execution started\n *   - `hook end`  (hook) hook complete\n *   - `pass`  (test) test passed\n *   - `fail`  (test, err) test failed\n *   - `pending`  (test) test pending\n */\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QtcnVubmVyLmpzIl0sIm5hbWVzIjpbImFuYWx5c2VyIiwicmVxdWlyZSIsIkV2ZW50RW1pdHRlciIsIk1vY2hhIiwiZnMiLCJwYXRoIiwibW9jaGEiLCJ0aW1lb3V0IiwidGVzdERpciIsInJlYWRkaXJTeW5jIiwiZmlsdGVyIiwiZmlsZSIsInN1YnN0ciIsImZvckVhY2giLCJhZGRGaWxlIiwiam9pbiIsImVtaXR0ZXIiLCJydW4iLCJ0ZXN0cyIsImNvbnRleHQiLCJzZXBhcmF0b3IiLCJydW5uZXIiLCJ1aSIsIm9uIiwidGVzdCIsImJvZHkiLCJyZXBsYWNlIiwib2JqIiwidGl0bGUiLCJzbGljZSIsImxlbmd0aCIsInN0YXRlIiwiYXNzZXJ0aW9ucyIsInB1c2giLCJyZXBvcnQiLCJlbWl0IiwicyIsImUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEyQkEsTUFBTUEsUUFBUSxHQUFHQyxPQUFPLENBQUMsc0JBQUQsQ0FBeEI7O0FBQ0EsTUFBTUMsWUFBWSxHQUFHRCxPQUFPLENBQUMsUUFBRCxDQUFQLENBQWtCQyxZQUF2Qzs7QUFFQSxNQUFNQyxLQUFLLEdBQUdGLE9BQU8sQ0FBQyxPQUFELENBQXJCO0FBQUEsTUFDSUcsRUFBRSxHQUFHSCxPQUFPLENBQUMsSUFBRCxDQURoQjtBQUFBLE1BRUlJLElBQUksR0FBR0osT0FBTyxDQUFDLE1BQUQsQ0FGbEI7O0FBR0lBLE9BQU8sQ0FBQyxpQkFBRCxDQUFQOztBQUVKLE1BQU1LLEtBQUssR0FBRyxJQUFJSCxLQUFKLENBQVU7QUFBRUksRUFBQUEsT0FBTyxFQUFFO0FBQVgsQ0FBVixDQUFkO0FBQ0EsTUFBTUMsT0FBTyxHQUFHLFNBQWhCLEMsQ0FHQTs7QUFDQUosRUFBRSxDQUFDSyxXQUFILENBQWVELE9BQWYsRUFBd0JFLE1BQXhCLENBQStCLFVBQVNDLElBQVQsRUFBYztBQUN6QztBQUNBLFNBQU9BLElBQUksQ0FBQ0MsTUFBTCxDQUFZLENBQUMsQ0FBYixNQUFvQixLQUEzQjtBQUVILENBSkQsRUFJR0MsT0FKSCxDQUlXLFVBQVNGLElBQVQsRUFBYztBQUNyQkwsRUFBQUEsS0FBSyxDQUFDUSxPQUFOLENBQ0lULElBQUksQ0FBQ1UsSUFBTCxDQUFVUCxPQUFWLEVBQW1CRyxJQUFuQixDQURKO0FBR0gsQ0FSRDtBQVVBLElBQUlLLE9BQU8sR0FBRyxJQUFJZCxZQUFKLEVBQWQ7O0FBQ0FjLE9BQU8sQ0FBQ0MsR0FBUixHQUFjLFlBQVc7QUFFdkIsTUFBSUMsS0FBSyxHQUFHLEVBQVo7QUFDQSxNQUFJQyxPQUFPLEdBQUcsRUFBZDtBQUNBLE1BQUlDLFNBQVMsR0FBRyxNQUFoQixDQUp1QixDQUt2Qjs7QUFDQSxNQUFJO0FBQ0osUUFBSUMsTUFBTSxHQUFHZixLQUFLLENBQUNnQixFQUFOLENBQVMsS0FBVCxFQUFnQkwsR0FBaEIsR0FDVk0sRUFEVSxDQUNQLFVBRE8sRUFDSyxVQUFTQyxJQUFULEVBQWU7QUFDM0I7QUFDQSxVQUFJQyxJQUFJLEdBQUdELElBQUksQ0FBQ0MsSUFBTCxDQUFVQyxPQUFWLENBQWtCLHNCQUFsQixFQUEwQyxFQUExQyxDQUFYLENBRjJCLENBRzNCOztBQUNBRCxNQUFBQSxJQUFJLEdBQUdBLElBQUksQ0FBQ0MsT0FBTCxDQUFhLE1BQWIsRUFBb0IsR0FBcEIsQ0FBUDtBQUNBLFVBQUlDLEdBQUcsR0FBRztBQUNSQyxRQUFBQSxLQUFLLEVBQUVKLElBQUksQ0FBQ0ksS0FESjtBQUVSVCxRQUFBQSxPQUFPLEVBQUVBLE9BQU8sQ0FBQ1UsS0FBUixDQUFjLENBQWQsRUFBaUIsQ0FBQ1QsU0FBUyxDQUFDVSxNQUE1QixDQUZEO0FBR1JDLFFBQUFBLEtBQUssRUFBRVAsSUFBSSxDQUFDTyxLQUhKO0FBSVI7QUFDQUMsUUFBQUEsVUFBVSxFQUFFaEMsUUFBUSxDQUFDeUIsSUFBRDtBQUxaLE9BQVY7QUFPQVAsTUFBQUEsS0FBSyxDQUFDZSxJQUFOLENBQVdOLEdBQVg7QUFDSCxLQWRVLEVBZVZKLEVBZlUsQ0FlUCxLQWZPLEVBZUEsWUFBVztBQUNsQlAsTUFBQUEsT0FBTyxDQUFDa0IsTUFBUixHQUFpQmhCLEtBQWpCO0FBQ0FGLE1BQUFBLE9BQU8sQ0FBQ21CLElBQVIsQ0FBYSxNQUFiLEVBQXFCakIsS0FBckI7QUFDSCxLQWxCVSxFQW1CVkssRUFuQlUsQ0FtQlAsT0FuQk8sRUFtQkUsVUFBU2EsQ0FBVCxFQUFZO0FBQ3ZCakIsTUFBQUEsT0FBTyxJQUFLaUIsQ0FBQyxDQUFDUixLQUFGLEdBQVVSLFNBQXRCO0FBRUQsS0F0QlUsRUF1QlZHLEVBdkJVLENBdUJQLFdBdkJPLEVBdUJNLFVBQVNhLENBQVQsRUFBWTtBQUMzQmpCLE1BQUFBLE9BQU8sR0FBR0EsT0FBTyxDQUFDVSxLQUFSLENBQWMsQ0FBZCxFQUFpQixFQUFFTyxDQUFDLENBQUNSLEtBQUYsQ0FBUUUsTUFBUixHQUFpQlYsU0FBUyxDQUFDVSxNQUE3QixDQUFqQixDQUFWO0FBQ0QsS0F6QlUsQ0FBYjtBQTBCQyxHQTNCRCxDQTJCRSxPQUFNTyxDQUFOLEVBQVM7QUFDVCxVQUFNQSxDQUFOO0FBQ0Q7QUFDRixDQXBDRDs7QUFzQ0FDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnZCLE9BQWpCO0FBRUEiLCJzb3VyY2VSb290IjoiL1VzZXJzL25ld19uYW1lL0Rlc2t0b3Avc3Vkb2t1IHNvbHZlci8iLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKiAgICAgICBETyBOT1QgRURJVCBUSElTIEZJTEVcbiogICAgICAgRm9yIEZDQyB0ZXN0aW5nIHB1cnBvc2VzIVxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKi9cblxuY29uc3QgYW5hbHlzZXIgPSByZXF1aXJlKCcuL2Fzc2VydGlvbi1hbmFseXNlcicpO1xuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuXG5jb25zdCBNb2NoYSA9IHJlcXVpcmUoJ21vY2hhJyksXG4gICAgZnMgPSByZXF1aXJlKCdmcycpLFxuICAgIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG4gICAgcmVxdWlyZShcIkBiYWJlbC9yZWdpc3RlclwiKTtcblxuY29uc3QgbW9jaGEgPSBuZXcgTW9jaGEoeyB0aW1lb3V0OiA1MDAwIH0pO1xuY29uc3QgdGVzdERpciA9ICcuL3Rlc3RzJ1xuXG5cbi8vIEFkZCBlYWNoIC5qcyBmaWxlIHRvIHRoZSBtb2NoYSBpbnN0YW5jZVxuZnMucmVhZGRpclN5bmModGVzdERpcikuZmlsdGVyKGZ1bmN0aW9uKGZpbGUpe1xuICAgIC8vIE9ubHkga2VlcCB0aGUgLmpzIGZpbGVzXG4gICAgcmV0dXJuIGZpbGUuc3Vic3RyKC0zKSA9PT0gJy5qcyc7XG5cbn0pLmZvckVhY2goZnVuY3Rpb24oZmlsZSl7XG4gICAgbW9jaGEuYWRkRmlsZShcbiAgICAgICAgcGF0aC5qb2luKHRlc3REaXIsIGZpbGUpXG4gICAgKTtcbn0pO1xuXG5sZXQgZW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbmVtaXR0ZXIucnVuID0gZnVuY3Rpb24oKSB7XG5cbiAgbGV0IHRlc3RzID0gW107XG4gIGxldCBjb250ZXh0ID0gXCJcIjtcbiAgbGV0IHNlcGFyYXRvciA9ICcgLT4gJztcbiAgLy8gUnVuIHRoZSB0ZXN0cy5cbiAgdHJ5IHtcbiAgbGV0IHJ1bm5lciA9IG1vY2hhLnVpKCd0ZGQnKS5ydW4oKVxuICAgIC5vbigndGVzdCBlbmQnLCBmdW5jdGlvbih0ZXN0KSB7XG4gICAgICAgIC8vIHJlbW92ZSBjb21tZW50c1xuICAgICAgICBsZXQgYm9keSA9IHRlc3QuYm9keS5yZXBsYWNlKC9cXC9cXC8uKlxcbnxcXC9cXCouKlxcKlxcLy9nLCAnJyk7XG4gICAgICAgIC8vIGNvbGxhcHNlIHNwYWNlc1xuICAgICAgICBib2R5ID0gYm9keS5yZXBsYWNlKC9cXHMrL2csJyAnKTtcbiAgICAgICAgbGV0IG9iaiA9IHtcbiAgICAgICAgICB0aXRsZTogdGVzdC50aXRsZSxcbiAgICAgICAgICBjb250ZXh0OiBjb250ZXh0LnNsaWNlKDAsIC1zZXBhcmF0b3IubGVuZ3RoKSxcbiAgICAgICAgICBzdGF0ZTogdGVzdC5zdGF0ZSxcbiAgICAgICAgICAvLyBib2R5OiBib2R5LFxuICAgICAgICAgIGFzc2VydGlvbnM6IGFuYWx5c2VyKGJvZHkpXG4gICAgICAgIH07XG4gICAgICAgIHRlc3RzLnB1c2gob2JqKTtcbiAgICB9KVxuICAgIC5vbignZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGVtaXR0ZXIucmVwb3J0ID0gdGVzdHM7XG4gICAgICAgIGVtaXR0ZXIuZW1pdCgnZG9uZScsIHRlc3RzKVxuICAgIH0pXG4gICAgLm9uKCdzdWl0ZScsIGZ1bmN0aW9uKHMpIHtcbiAgICAgIGNvbnRleHQgKz0gKHMudGl0bGUgKyBzZXBhcmF0b3IpO1xuXG4gICAgfSlcbiAgICAub24oJ3N1aXRlIGVuZCcsIGZ1bmN0aW9uKHMpIHtcbiAgICAgIGNvbnRleHQgPSBjb250ZXh0LnNsaWNlKDAsIC0ocy50aXRsZS5sZW5ndGggKyBzZXBhcmF0b3IubGVuZ3RoKSlcbiAgICB9KVxuICB9IGNhdGNoKGUpIHtcbiAgICB0aHJvdyhlKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbWl0dGVyO1xuXG4vKlxuICogTW9jaGEucnVubmVyIEV2ZW50czpcbiAqIGNhbiBiZSB1c2VkIHRvIGJ1aWxkIGEgYmV0dGVyIGN1c3RvbSByZXBvcnRcbiAqXG4gKiAgIC0gYHN0YXJ0YCAgZXhlY3V0aW9uIHN0YXJ0ZWRcbiAqICAgLSBgZW5kYCAgZXhlY3V0aW9uIGNvbXBsZXRlXG4gKiAgIC0gYHN1aXRlYCAgKHN1aXRlKSB0ZXN0IHN1aXRlIGV4ZWN1dGlvbiBzdGFydGVkXG4gKiAgIC0gYHN1aXRlIGVuZGAgIChzdWl0ZSkgYWxsIHRlc3RzIChhbmQgc3ViLXN1aXRlcykgaGF2ZSBmaW5pc2hlZFxuICogICAtIGB0ZXN0YCAgKHRlc3QpIHRlc3QgZXhlY3V0aW9uIHN0YXJ0ZWRcbiAqICAgLSBgdGVzdCBlbmRgICAodGVzdCkgdGVzdCBjb21wbGV0ZWRcbiAqICAgLSBgaG9va2AgIChob29rKSBob29rIGV4ZWN1dGlvbiBzdGFydGVkXG4gKiAgIC0gYGhvb2sgZW5kYCAgKGhvb2spIGhvb2sgY29tcGxldGVcbiAqICAgLSBgcGFzc2AgICh0ZXN0KSB0ZXN0IHBhc3NlZFxuICogICAtIGBmYWlsYCAgKHRlc3QsIGVycikgdGVzdCBmYWlsZWRcbiAqICAgLSBgcGVuZGluZ2AgICh0ZXN0KSB0ZXN0IHBlbmRpbmdcbiAqLyJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "test-runner.js"
      ],
      "names": [
        "analyser",
        "require",
        "EventEmitter",
        "Mocha",
        "fs",
        "path",
        "mocha",
        "timeout",
        "testDir",
        "readdirSync",
        "filter",
        "file",
        "substr",
        "forEach",
        "addFile",
        "join",
        "emitter",
        "run",
        "tests",
        "context",
        "separator",
        "runner",
        "ui",
        "on",
        "test",
        "body",
        "replace",
        "obj",
        "title",
        "slice",
        "length",
        "state",
        "assertions",
        "push",
        "report",
        "emit",
        "s",
        "e",
        "module",
        "exports"
      ],
      "mappings": "AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,sBAAD,CAAxB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,QAAD,CAAP,CAAkBC,YAAvC;;AAEA,MAAMC,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;AAAA,MACIG,EAAE,GAAGH,OAAO,CAAC,IAAD,CADhB;AAAA,MAEII,IAAI,GAAGJ,OAAO,CAAC,MAAD,CAFlB;;AAGIA,OAAO,CAAC,iBAAD,CAAP;;AAEJ,MAAMK,KAAK,GAAG,IAAIH,KAAJ,CAAU;AAAEI,EAAAA,OAAO,EAAE;AAAX,CAAV,CAAd;AACA,MAAMC,OAAO,GAAG,SAAhB,C,CAGA;;AACAJ,EAAE,CAACK,WAAH,CAAeD,OAAf,EAAwBE,MAAxB,CAA+B,UAASC,IAAT,EAAc;AACzC;AACA,SAAOA,IAAI,CAACC,MAAL,CAAY,CAAC,CAAb,MAAoB,KAA3B;AAEH,CAJD,EAIGC,OAJH,CAIW,UAASF,IAAT,EAAc;AACrBL,EAAAA,KAAK,CAACQ,OAAN,CACIT,IAAI,CAACU,IAAL,CAAUP,OAAV,EAAmBG,IAAnB,CADJ;AAGH,CARD;AAUA,IAAIK,OAAO,GAAG,IAAId,YAAJ,EAAd;;AACAc,OAAO,CAACC,GAAR,GAAc,YAAW;AAEvB,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,SAAS,GAAG,MAAhB,CAJuB,CAKvB;;AACA,MAAI;AACJ,QAAIC,MAAM,GAAGf,KAAK,CAACgB,EAAN,CAAS,KAAT,EAAgBL,GAAhB,GACVM,EADU,CACP,UADO,EACK,UAASC,IAAT,EAAe;AAC3B;AACA,UAAIC,IAAI,GAAGD,IAAI,CAACC,IAAL,CAAUC,OAAV,CAAkB,sBAAlB,EAA0C,EAA1C,CAAX,CAF2B,CAG3B;;AACAD,MAAAA,IAAI,GAAGA,IAAI,CAACC,OAAL,CAAa,MAAb,EAAoB,GAApB,CAAP;AACA,UAAIC,GAAG,GAAG;AACRC,QAAAA,KAAK,EAAEJ,IAAI,CAACI,KADJ;AAERT,QAAAA,OAAO,EAAEA,OAAO,CAACU,KAAR,CAAc,CAAd,EAAiB,CAACT,SAAS,CAACU,MAA5B,CAFD;AAGRC,QAAAA,KAAK,EAAEP,IAAI,CAACO,KAHJ;AAIR;AACAC,QAAAA,UAAU,EAAEhC,QAAQ,CAACyB,IAAD;AALZ,OAAV;AAOAP,MAAAA,KAAK,CAACe,IAAN,CAAWN,GAAX;AACH,KAdU,EAeVJ,EAfU,CAeP,KAfO,EAeA,YAAW;AAClBP,MAAAA,OAAO,CAACkB,MAAR,GAAiBhB,KAAjB;AACAF,MAAAA,OAAO,CAACmB,IAAR,CAAa,MAAb,EAAqBjB,KAArB;AACH,KAlBU,EAmBVK,EAnBU,CAmBP,OAnBO,EAmBE,UAASa,CAAT,EAAY;AACvBjB,MAAAA,OAAO,IAAKiB,CAAC,CAACR,KAAF,GAAUR,SAAtB;AAED,KAtBU,EAuBVG,EAvBU,CAuBP,WAvBO,EAuBM,UAASa,CAAT,EAAY;AAC3BjB,MAAAA,OAAO,GAAGA,OAAO,CAACU,KAAR,CAAc,CAAd,EAAiB,EAAEO,CAAC,CAACR,KAAF,CAAQE,MAAR,GAAiBV,SAAS,CAACU,MAA7B,CAAjB,CAAV;AACD,KAzBU,CAAb;AA0BC,GA3BD,CA2BE,OAAMO,CAAN,EAAS;AACT,UAAMA,CAAN;AACD;AACF,CApCD;;AAsCAC,MAAM,CAACC,OAAP,GAAiBvB,OAAjB;AAEA",
      "sourceRoot": "/Users/new_name/Desktop/sudoku solver/",
      "sourcesContent": [
        "/*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*       DO NOT EDIT THIS FILE\n*       For FCC testing purposes!\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*/\n\nconst analyser = require('./assertion-analyser');\nconst EventEmitter = require('events').EventEmitter;\n\nconst Mocha = require('mocha'),\n    fs = require('fs'),\n    path = require('path');\n    require(\"@babel/register\");\n\nconst mocha = new Mocha({ timeout: 5000 });\nconst testDir = './tests'\n\n\n// Add each .js file to the mocha instance\nfs.readdirSync(testDir).filter(function(file){\n    // Only keep the .js files\n    return file.substr(-3) === '.js';\n\n}).forEach(function(file){\n    mocha.addFile(\n        path.join(testDir, file)\n    );\n});\n\nlet emitter = new EventEmitter();\nemitter.run = function() {\n\n  let tests = [];\n  let context = \"\";\n  let separator = ' -> ';\n  // Run the tests.\n  try {\n  let runner = mocha.ui('tdd').run()\n    .on('test end', function(test) {\n        // remove comments\n        let body = test.body.replace(/\\/\\/.*\\n|\\/\\*.*\\*\\//g, '');\n        // collapse spaces\n        body = body.replace(/\\s+/g,' ');\n        let obj = {\n          title: test.title,\n          context: context.slice(0, -separator.length),\n          state: test.state,\n          // body: body,\n          assertions: analyser(body)\n        };\n        tests.push(obj);\n    })\n    .on('end', function() {\n        emitter.report = tests;\n        emitter.emit('done', tests)\n    })\n    .on('suite', function(s) {\n      context += (s.title + separator);\n\n    })\n    .on('suite end', function(s) {\n      context = context.slice(0, -(s.title.length + separator.length))\n    })\n  } catch(e) {\n    throw(e);\n  }\n};\n\nmodule.exports = emitter;\n\n/*\n * Mocha.runner Events:\n * can be used to build a better custom report\n *\n *   - `start`  execution started\n *   - `end`  execution complete\n *   - `suite`  (suite) test suite execution started\n *   - `suite end`  (suite) all tests (and sub-suites) have finished\n *   - `test`  (test) test execution started\n *   - `test end`  (test) test completed\n *   - `hook`  (hook) hook execution started\n *   - `hook end`  (hook) hook complete\n *   - `pass`  (test) test passed\n *   - `fail`  (test, err) test failed\n *   - `pending`  (test) test pending\n */"
      ]
    },
    "sourceType": "module",
    "mtime": 1704993982279
  },
  "{\"sourceRoot\":\"/Users/new_name/Desktop/sudoku solver/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/new_name/Desktop/sudoku solver\",\"filename\":\"/Users/new_name/Desktop/sudoku solver/assertion-analyser.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/new_name/Desktop/sudoku solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/new_name/Desktop/sudoku solver/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/new_name/Desktop/sudoku solver",
      "filename": "/Users/new_name/Desktop/sudoku solver/assertion-analyser.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/new_name/Desktop/sudoku solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/new_name/Desktop/sudoku solver/assertion-analyser.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/new_name/Desktop/sudoku solver/assertion-analyser.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/new_name/Desktop/sudoku solver/",
        "sourceFileName": "assertion-analyser.js"
      }
    },
    "ast": null,
    "code": "/*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*       DO NOT EDIT THIS FILE\n*       For FCC testing purposes!\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*/\nfunction objParser(str, init) {\n  // finds objects, arrays, strings, and function arguments\n  // between parens, because they may contain ','\n  let openSym = ['[', '{', '\"', \"'\", '('];\n  let closeSym = [']', '}', '\"', \"'\", ')'];\n  let type;\n  let i;\n\n  for (i = init || 0; i < str.length; i++) {\n    type = openSym.indexOf(str[i]);\n    if (type !== -1) break;\n  }\n\n  if (type === -1) return null;\n  let open = openSym[type];\n  let close = closeSym[type];\n  let count = 1;\n  let k;\n\n  for (k = i + 1; k < str.length; k++) {\n    if (open === '\"' || open === \"'\") {\n      if (str[k] === close) count--;\n      if (str[k] === '\\\\') k++;\n    } else {\n      if (str[k] === open) count++;\n      if (str[k] === close) count--;\n    }\n\n    if (count === 0) break;\n  }\n\n  if (count !== 0) return null;\n  let obj = str.slice(i, k + 1);\n  return {\n    start: i,\n    end: k,\n    obj: obj\n  };\n}\n\nfunction replacer(str) {\n  // replace objects with a symbol ( __#n)\n  let obj;\n  let cnt = 0;\n  let data = [];\n\n  while (obj = objParser(str)) {\n    data[cnt] = obj.obj;\n    str = str.substring(0, obj.start) + '__#' + cnt++ + str.substring(obj.end + 1);\n  }\n\n  return {\n    str: str,\n    dictionary: data\n  };\n}\n\nfunction splitter(str) {\n  // split on commas, then restore the objects\n  let strObj = replacer(str);\n  let args = strObj.str.split(',');\n  args = args.map(function (a) {\n    let m = a.match(/__#(\\d+)/);\n\n    while (m) {\n      a = a.replace(/__#(\\d+)/, strObj.dictionary[m[1]]);\n      m = a.match(/__#(\\d+)/);\n    }\n\n    return a.trim();\n  });\n  return args;\n}\n\nfunction assertionAnalyser(body) {\n  // already filtered in the test runner\n  // // remove comments\n  // body = body.replace(/\\/\\/.*\\n|\\/\\*.*\\*\\//g, '');\n  // // get test function body\n  // body = body.match(/\\{\\s*([\\s\\S]*)\\}\\s*$/)[1];\n  if (!body) return \"invalid assertion\"; // replace assertions bodies, so that they cannot\n  // contain the word 'assertion'\n\n  let cleanedBody = body.match(/(?:browser\\s*\\.\\s*)?assert\\s*\\.\\s*\\w*\\([\\s\\S]*\\)/);\n\n  if (cleanedBody && Array.isArray(cleanedBody)) {\n    body = cleanedBody[0];\n  } else {\n    // No assertions present\n    return [];\n  }\n\n  let s = replacer(body); // split on 'assertion'\n\n  let splittedAssertions = s.str.split('assert');\n  let assertions = splittedAssertions.slice(1); // match the METHODS\n\n  let assertionBodies = [];\n  let methods = assertions.map(function (a, i) {\n    let m = a.match(/^\\s*\\.\\s*(\\w+)__#(\\d+)/);\n    assertionBodies.push(parseInt(m[2]));\n    let pre = splittedAssertions[i].match(/browser\\s*\\.\\s*/) ? 'browser.' : '';\n    return pre + m[1];\n  });\n  if (methods.some(function (m) {\n    return !m;\n  })) return \"invalid assertion\"; // remove parens from the assertions bodies\n\n  let bodies = assertionBodies.map(function (b) {\n    return s.dictionary[b].slice(1, -1).trim();\n  });\n  assertions = methods.map(function (m, i) {\n    return {\n      method: m,\n      args: splitter(bodies[i]) //replace objects, split on ',' ,then restore objects\n\n    };\n  });\n  return assertions;\n}\n\nmodule.exports = assertionAnalyser;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "assertion-analyser.js"
      ],
      "names": [
        "objParser",
        "str",
        "init",
        "openSym",
        "closeSym",
        "type",
        "i",
        "length",
        "indexOf",
        "open",
        "close",
        "count",
        "k",
        "obj",
        "slice",
        "start",
        "end",
        "replacer",
        "cnt",
        "data",
        "substring",
        "dictionary",
        "splitter",
        "strObj",
        "args",
        "split",
        "map",
        "a",
        "m",
        "match",
        "replace",
        "trim",
        "assertionAnalyser",
        "body",
        "cleanedBody",
        "Array",
        "isArray",
        "s",
        "splittedAssertions",
        "assertions",
        "assertionBodies",
        "methods",
        "push",
        "parseInt",
        "pre",
        "some",
        "bodies",
        "b",
        "method",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/new_name/Desktop/sudoku solver/",
      "sourcesContent": [
        "/*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*       DO NOT EDIT THIS FILE\n*       For FCC testing purposes!\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*/\n\nfunction objParser(str, init) {\n  // finds objects, arrays, strings, and function arguments\n  // between parens, because they may contain ','\n  let openSym = ['[', '{', '\"', \"'\", '('];\n  let closeSym = [']', '}', '\"', \"'\", ')'];\n  let type;\n  let i;\n  for(i = (init || 0); i < str.length; i++ ) {\n    type = openSym.indexOf(str[i]);\n    if( type !== -1)  break;\n  }\n  if (type === -1) return null;\n  let open = openSym[type];\n  let close = closeSym[type];\n  let count = 1;\n  let k;\n  for(k = i+1; k < str.length; k++) {\n    if(open === '\"' || open === \"'\") {\n      if(str[k] === close) count--;\n      if(str[k] === '\\\\') k++;\n    } else {\n      if(str[k] === open) count++;\n      if(str[k] === close) count--;\n    }\n    if(count === 0) break;\n  }\n  if(count !== 0) return null;\n  let obj = str.slice(i, k+1);\n  return {\n    start : i,\n    end: k,\n    obj: obj\n  };\n}\n\nfunction replacer(str) {\n  // replace objects with a symbol ( __#n)\n  let obj;\n  let cnt = 0;\n  let data = [];\n  while(obj = objParser(str)) {\n    data[cnt] = obj.obj;\n    str = str.substring(0, obj.start) + '__#' + cnt++ + str.substring(obj.end+1)\n  }\n  return {\n    str : str,\n    dictionary : data\n  }\n}\n\nfunction splitter(str) {\n  // split on commas, then restore the objects\n  let strObj = replacer(str);\n  let args = strObj.str.split(',');\n  args = args.map(function(a){\n    let m = a.match(/__#(\\d+)/);\n    while (m) {\n      a = a.replace(/__#(\\d+)/, strObj.dictionary[m[1]]);\n      m = a.match(/__#(\\d+)/);\n    }\n    return a.trim();\n  })\n  return args;\n}\n\nfunction assertionAnalyser(body) {\n  \n  // already filtered in the test runner\n  // // remove comments\n  // body = body.replace(/\\/\\/.*\\n|\\/\\*.*\\*\\//g, '');\n  // // get test function body\n  // body = body.match(/\\{\\s*([\\s\\S]*)\\}\\s*$/)[1];\n  \n  if(!body) return \"invalid assertion\";\n  // replace assertions bodies, so that they cannot\n  // contain the word 'assertion'\n\n  let cleanedBody = body.match(/(?:browser\\s*\\.\\s*)?assert\\s*\\.\\s*\\w*\\([\\s\\S]*\\)/)\n  if(cleanedBody && Array.isArray(cleanedBody)) {\n    body = cleanedBody[0];\n  } else {\n    // No assertions present\n    return [];\n  }\n  let s = replacer(body);\n  // split on 'assertion'\n  let splittedAssertions = s.str.split('assert');\n  let assertions = splittedAssertions.slice(1);\n  // match the METHODS\n\n  let assertionBodies = [];\n  let methods = assertions.map(function(a, i){\n    let m = a.match(/^\\s*\\.\\s*(\\w+)__#(\\d+)/);\n    assertionBodies.push(parseInt(m[2]));\n    let pre = splittedAssertions[i].match(/browser\\s*\\.\\s*/) ? 'browser.' : '';\n    return pre + m[1];\n  });\n  if(methods.some(function(m){ return !m })) return \"invalid assertion\";\n  // remove parens from the assertions bodies\n  let bodies = assertionBodies.map(function(b){\n    return s.dictionary[b].slice(1,-1).trim();\n  });\n  assertions = methods.map(function(m, i) {\n    return {\n      method: m,\n      args: splitter(bodies[i]) //replace objects, split on ',' ,then restore objects\n    }\n  })\n  return assertions;\n}\n\nmodule.exports = assertionAnalyser;\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1704993982276
  }
}