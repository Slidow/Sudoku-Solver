{
  "{\"sourceRoot\":\"/Users/new_name/Desktop/sudoku solver/routes/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/new_name/Desktop/sudoku solver\",\"filename\":\"/Users/new_name/Desktop/sudoku solver/routes/api.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"/Users/new_name/Desktop/sudoku solver\",\"plugins\":[],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/new_name/Desktop/sudoku solver/routes/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/new_name/Desktop/sudoku solver",
      "filename": "/Users/new_name/Desktop/sudoku solver/routes/api.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "/Users/new_name/Desktop/sudoku solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/new_name/Desktop/sudoku solver/routes/api.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/new_name/Desktop/sudoku solver/routes/api.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/new_name/Desktop/sudoku solver/routes/",
        "sourceFileName": "api.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n\nmodule.exports = function (app) {\n  let solver = new SudokuSolver();\n  app.route('/api/check').post((req, res) => {\n    let puzzle = req.body.puzzle;\n    let coordinate = req.body.coordinate;\n    let stringValue = req.body.value;\n    let value = parseInt(req.body.value);\n\n    if (!puzzle || !coordinate || !stringValue) {\n      res.json({\n        error: 'Required field(s) missing'\n      });\n      return;\n    }\n\n    if (!/^[1-9]$/.test(value)) {\n      res.json({\n        error: \"Invalid value\"\n      });\n      return;\n    }\n\n    const coordinateMatch = coordinate.match(/([A-I])([1-9])/);\n\n    if (coordinate.length !== 2 || !coordinateMatch) {\n      res.json({\n        error: \"Invalid coordinate\"\n      });\n      return;\n    }\n\n    let columnLetterValue = coordinateMatch[1];\n    let horizontalValue = parseInt(coordinateMatch[2]);\n    let columnValue = columnLetterValue.charCodeAt(0) - 'A'.charCodeAt(0) + 1;\n\n    if (!solver.validate(puzzle)) {\n      res.json({\n        error: 'Invalid characters in puzzle'\n      });\n      return;\n    }\n\n    if (solver.validate(puzzle) === \"too many characters\") {\n      res.json({\n        error: 'Expected puzzle to be 81 characters long'\n      });\n      return;\n    }\n\n    let puzzleArray = solver.createTwoDimensionalArray(puzzle);\n    let checkHorizontalConflict = solver.checkRowPlacement(puzzleArray, horizontalValue - 1, columnValue - 1, value);\n    let checkVerticalConflict = solver.checkColPlacement(puzzleArray, horizontalValue - 1, columnValue - 1, value);\n    let checkRegionConflict = solver.checkRegionPlacement(puzzleArray, horizontalValue - 1, columnValue - 1, value);\n    let conflicts = [];\n\n    if (!checkHorizontalConflict) {\n      conflicts.push(\"row\");\n    }\n\n    if (!checkVerticalConflict) {\n      conflicts.push(\"column\");\n    }\n\n    if (!checkRegionConflict) {\n      conflicts.push('region');\n    }\n\n    if (conflicts.length > 0) {\n      res.json({\n        valid: false,\n        conflict: conflicts\n      });\n      return;\n    } else {\n      res.json({\n        valid: true\n      });\n      return;\n    }\n  });\n  app.route('/api/solve').post((req, res) => {\n    let puzzle = req.body.puzzle;\n\n    if (!puzzle) {\n      res.json({\n        error: 'Required field missing'\n      });\n      return;\n    }\n\n    if (!solver.validate(puzzle)) {\n      res.json({\n        error: 'Invalid characters in puzzle'\n      });\n      return;\n    }\n\n    if (solver.validate(puzzle) === \"too many characters\") {\n      res.json({\n        error: 'Expected puzzle to be 81 characters long'\n      });\n      return;\n    }\n\n    let puzzleArray = solver.createTwoDimensionalArray(puzzle);\n    let solution = solver.solve(puzzleArray);\n    console.log(solution);\n\n    if (!solution) {\n      res.json({\n        error: 'Puzzle cannot be solved'\n      });\n      return;\n    } // let puzzleArrayString = solution.map((row) => row.join('')).join('');\n\n\n    res.json({\n      solution: solution\n    });\n  });\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "api.js"
      ],
      "names": [
        "SudokuSolver",
        "require",
        "module",
        "exports",
        "app",
        "solver",
        "route",
        "post",
        "req",
        "res",
        "puzzle",
        "body",
        "coordinate",
        "stringValue",
        "value",
        "parseInt",
        "json",
        "error",
        "test",
        "coordinateMatch",
        "match",
        "length",
        "columnLetterValue",
        "horizontalValue",
        "columnValue",
        "charCodeAt",
        "validate",
        "puzzleArray",
        "createTwoDimensionalArray",
        "checkHorizontalConflict",
        "checkRowPlacement",
        "checkVerticalConflict",
        "checkColPlacement",
        "checkRegionConflict",
        "checkRegionPlacement",
        "conflicts",
        "push",
        "valid",
        "conflict",
        "solution",
        "solve",
        "console",
        "log"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/new_name/Desktop/sudoku solver/routes/",
      "sourcesContent": [
        "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n\nmodule.exports = function (app) {\n  \n  let solver = new SudokuSolver();\n\n  app.route('/api/check')\n    .post((req, res) => {\n      let puzzle = req.body.puzzle;\n      let coordinate = req.body.coordinate;\n      let stringValue = req.body.value;\n      let value = parseInt(req.body.value);\n\n      if (!puzzle || !coordinate || !stringValue) {\n        res.json({ error: 'Required field(s) missing' });\n        return;\n      }\n      \n      if (!/^[1-9]$/.test(value)) {\n        res.json({ error: \"Invalid value\" });\n        return;\n      }\n  \n      const  coordinateMatch = coordinate.match(/([A-I])([1-9])/);\n\n      if (coordinate.length !== 2 || !coordinateMatch) {\n        res.json({ error: \"Invalid coordinate\" });\n        return;\n      }\n\n      let columnLetterValue = coordinateMatch[1];\n      let horizontalValue = parseInt(coordinateMatch[2]);\n      let columnValue = columnLetterValue.charCodeAt(0) - 'A'.charCodeAt(0) + 1;\n\n      if (!solver.validate(puzzle)) {\n        res.json({ error: 'Invalid characters in puzzle' });\n        return;\n      }\n\n      if (solver.validate(puzzle) === \"too many characters\") {\n        res.json({ error: 'Expected puzzle to be 81 characters long' });\n        return;\n      }\n\n      let puzzleArray = solver.createTwoDimensionalArray(puzzle);\n\n      let checkHorizontalConflict = solver.checkRowPlacement(puzzleArray, horizontalValue - 1, columnValue - 1, value);\n      let checkVerticalConflict = solver.checkColPlacement(puzzleArray, horizontalValue - 1, columnValue - 1, value);\n      let checkRegionConflict = solver.checkRegionPlacement(puzzleArray, horizontalValue - 1, columnValue - 1, value);\n\n      let conflicts = [];\n\n      if (!checkHorizontalConflict) {\n        conflicts.push(\"row\");\n      }\n      if (!checkVerticalConflict) {\n        conflicts.push(\"column\");\n      }\n      if (!checkRegionConflict) {\n        conflicts.push('region');\n      }\n      \n      if (conflicts.length > 0) {\n        res.json({ valid: false, conflict: conflicts });\n        return;\n      } else {\n        res.json({ valid: true });\n        return;\n      }\n    });\n    \n  app.route('/api/solve')\n    .post((req, res) => {\n      let puzzle = req.body.puzzle;\n\n      if (!puzzle) {\n        res.json({ error: 'Required field missing' });\n        return;\n      }\n      if (!solver.validate(puzzle)) {\n        res.json({ error: 'Invalid characters in puzzle' });\n        return;\n      }\n      if (solver.validate(puzzle) === \"too many characters\") {\n        res.json({ error: 'Expected puzzle to be 81 characters long' });\n        return;\n      }\n\n      let puzzleArray = solver.createTwoDimensionalArray(puzzle);\n\n      let solution = solver.solve(puzzleArray);\n      console.log(solution);\n\n      if (!solution) {\n        res.json({ error: 'Puzzle cannot be solved' });\n        return;\n      }\n      // let puzzleArrayString = solution.map((row) => row.join('')).join('');\n\n      res.json({solution: solution});\n    });\n};\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1705097471501
  },
  "{\"sourceRoot\":\"/Users/new_name/Desktop/sudoku solver/controllers/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/new_name/Desktop/sudoku solver\",\"filename\":\"/Users/new_name/Desktop/sudoku solver/controllers/sudoku-solver.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"/Users/new_name/Desktop/sudoku solver\",\"plugins\":[],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/new_name/Desktop/sudoku solver/controllers/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/new_name/Desktop/sudoku solver",
      "filename": "/Users/new_name/Desktop/sudoku solver/controllers/sudoku-solver.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "/Users/new_name/Desktop/sudoku solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/new_name/Desktop/sudoku solver/controllers/sudoku-solver.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/new_name/Desktop/sudoku solver/controllers/sudoku-solver.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/new_name/Desktop/sudoku solver/controllers/",
        "sourceFileName": "sudoku-solver.js"
      }
    },
    "ast": null,
    "code": "class SudokuSolver {\n  createTwoDimensionalArray(puzzleString) {\n    const size = 9;\n    const sudokuArray = [];\n\n    for (let i = 0; i < size; i++) {\n      sudokuArray.push(puzzleString.slice(i * size, (i + 1) * size).split(''));\n    }\n\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        sudokuArray[i][j] = sudokuArray[i][j] === '.' ? 0 : parseInt(sudokuArray[i][j]);\n      }\n    }\n\n    return sudokuArray;\n  }\n\n  arrayToString(array) {\n    return array.map(row => row.join('')).join('');\n  }\n\n  validate(puzzleString) {\n    if (puzzleString.length === 81) {\n      return /^[1-9.]+$/.test(puzzleString);\n    } else {\n      return \"too many characters\";\n    }\n  }\n\n  checkRowPlacement(puzzleArray, row, column, value) {\n    if (puzzleArray[row][column] === value) {\n      return true;\n    }\n\n    if (puzzleArray[row][column] !== 0) {\n      return false;\n    }\n\n    for (let i = 0; i < 9; i++) {\n      if (puzzleArray[row][i] === value) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  checkColPlacement(puzzleArray, row, column, value) {\n    if (puzzleArray[row][column] === value) {\n      return true;\n    }\n\n    if (puzzleArray[row][column] !== 0) {\n      return false;\n    }\n\n    for (let i = 0; i < 9; i++) {\n      if (puzzleArray[i][column] === value) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  checkRegionPlacement(puzzleArray, row, column, value) {\n    const subgridRow = Math.floor(row / 3) * 3;\n    const subgridCol = Math.floor(column / 3) * 3;\n\n    if (puzzleArray[row][column] === value) {\n      return true;\n    }\n\n    if (puzzleArray[row][column] !== 0) {\n      return false;\n    }\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (puzzleArray[subgridRow + i][subgridCol + j] === value) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  solve(puzzleArray) {\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        if (puzzleArray[row][col] === 0) {\n          for (let num = 1; num <= 9; num++) {\n            if (this.checkRowPlacement(puzzleArray, row, col, num) && this.checkColPlacement(puzzleArray, row, col, num) && this.checkRegionPlacement(puzzleArray, row, col, num)) {\n              puzzleArray[row][col] = num;\n\n              if (this.solve(puzzleArray)) {\n                return this.arrayToString(puzzleArray);\n              }\n\n              puzzleArray[row][col] = 0;\n            }\n          }\n\n          return false;\n        }\n      }\n    }\n\n    return puzzleArray;\n  }\n\n}\n\nmodule.exports = SudokuSolver;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "sudoku-solver.js"
      ],
      "names": [
        "SudokuSolver",
        "createTwoDimensionalArray",
        "puzzleString",
        "size",
        "sudokuArray",
        "i",
        "push",
        "slice",
        "split",
        "j",
        "parseInt",
        "arrayToString",
        "array",
        "map",
        "row",
        "join",
        "validate",
        "length",
        "test",
        "checkRowPlacement",
        "puzzleArray",
        "column",
        "value",
        "checkColPlacement",
        "checkRegionPlacement",
        "subgridRow",
        "Math",
        "floor",
        "subgridCol",
        "solve",
        "col",
        "num",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/new_name/Desktop/sudoku solver/controllers/",
      "sourcesContent": [
        "class SudokuSolver {\n\n  createTwoDimensionalArray(puzzleString) {\n    const size = 9;\n    const sudokuArray = [];\n\n    for (let i = 0; i < size; i++) {\n      sudokuArray.push(puzzleString.slice(i * size, (i + 1) * size).split(''));\n    }\n\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        sudokuArray[i][j] = sudokuArray[i][j] === '.' ? 0 : parseInt(sudokuArray[i][j])\n      }\n    }\n    return sudokuArray;\n  }\n\n  arrayToString(array) {\n    return array.map(row => row.join('')).join('');\n  }\n\n  validate(puzzleString) {\n    if (puzzleString.length === 81) {\n      return /^[1-9.]+$/.test(puzzleString);\n    }else {\n      return \"too many characters\";\n    }\n  }\n\n  checkRowPlacement(puzzleArray, row, column, value) {\n    if (puzzleArray[row][column] === value) {\n      return true;\n    }\n    \n    if (puzzleArray[row][column] !== 0) {\n      return false;\n    }\n    \n    for (let i = 0; i < 9; i++) {\n      if (puzzleArray[row][i] === value) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  checkColPlacement(puzzleArray, row, column, value) {\n    if (puzzleArray[row][column] === value) {\n      return true;\n    }\n\n    if (puzzleArray[row][column] !== 0) {\n      return false;\n    }\n   \n    for (let i = 0; i < 9; i++) {\n      if (puzzleArray[i][column] === value) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  checkRegionPlacement(puzzleArray, row, column, value) {\n    const subgridRow = Math.floor(row / 3) * 3;\n    const subgridCol = Math.floor(column / 3) * 3;\n\n    if (puzzleArray[row][column] === value) {\n      return true;\n    }\n\n    if (puzzleArray[row][column] !== 0) {\n      return false;\n    }\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (puzzleArray[subgridRow + i][subgridCol + j] === value) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  solve(puzzleArray) {\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        if (puzzleArray[row][col] === 0) {\n          for (let num = 1; num <= 9; num++) {\n            if (this.checkRowPlacement(puzzleArray, row, col, num) && this.checkColPlacement(puzzleArray, row, col, num) && this.checkRegionPlacement(puzzleArray, row, col, num)) {\n              puzzleArray[row][col] = num;\n              \n              if (this.solve(puzzleArray)) {\n                return this.arrayToString(puzzleArray);\n              }\n              puzzleArray[row][col] = 0;\n            }\n          }\n          return false;\n        }\n      }\n    }\n    return puzzleArray;\n  }\n}\n\nmodule.exports = SudokuSolver;\n\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1705097843559
  }
}